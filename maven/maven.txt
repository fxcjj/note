

From
百度云盘/technology/Maven知识讲解

install maven

config environment variable
	M2_HOME
	MAVEN_HOME
	
maven standard layout
	src/main/java //source code
	src/test/java //test class
	src/main/resources //conf file

lifecycle
	mvn clean //delete target directory
	mvn compile //compile class to target/classes
	mvn test //generate three test report(surefire..)
	mvn package //generate project_name.jar
	mvn install //install jar to the local repository. after installed, you can refer in other project.

declare dependency
	<dependency>
		<groupId>com.vic</groupId>
		<artifactId>user-core</artifactId>
		<version>1.0.0-Release</version>
	</dependency>

//project object model
pom.xml

//central repository, you can find in lib\maven-model-builder.jar\org\...\pom-4.0.0.mxl.
mvnrepository.com


//local repository, the default local repository, 
you can change the default repository by update conf/settings.xml(localRepository).
such as: d:\repo
C:\Users\Victor\.m2


mvn archetype
	refer to note/maven/02-xxx.txt
	

maven内置隐式变量
	${project.groupId}
	${project.version}
	...
	

依赖范围(scope)

	默认是compile
	
	test
	在测试范围有效，对于src/main/java是无效的，只对src/test/java有效。
	在编译、打包时不会将依赖加到lib中。
	
	compile
	在编译、打包时将依赖加到lib中。
	
	provided
	在编译、测试加进去，打包不加进去，如servlet-api.jar,
	已经存在tomcat等web容器中，打包会有冲突的。
	
	runtime
	编译、测试无效，打包时用到，如：mysql-connector.jar
	
依赖传递
	scope为test是不会传递的。
	
	要在自己的项目中引入junit(test范围)

第一种情况：
直接依赖  
	A -> v1.0
	B -> v2.0

间接依赖
	C -> A, B
	在C中的pom.xml中先写谁就用谁，此处用A。
	
当依赖层级相同时，谁在前面先依赖谁。

第二种情况：
A -> M -> jv1.0

B -> jv1.3

C -> A, B

则C使用的是B中的jv1.3，即按照最短路径依赖。


当想使用具体的version时而且存在传递依赖时，可以使用exclusions标签排除不需要的依赖。



create a simple project(skip archetype selection)
packing pom




snaphsot 不稳定版本
alpha 内测
beta 公测
release(RC) 发布版本
GA (General Available) 可靠/产品版本
				
cms0.0.1-SNAPSHOT-->cms0.0.1-Release-->cms1.0.1-SNAPSHOT(架构有大的调整)
				--->cms0.1.1-SNAPSHOT										-->cms1.0.1-Release(合并)
				--->cms0.1.1-Release


v7
查找依赖顺序local repository -> nexus -> central repository

publish way
	tomcat
	built-in jetty
	
nexus-lasted-bundle
	/nexus-2.3.1-01/bin
	/sonatype-work/nexus //私服库，所有的东西都存在这儿
	
install nexus
	a, add "bin" environment variable 
	b, type nexus in the command line
		start, stop, restart, install, uninstall
	c, bin/jws/conf/wrapper.conf/
		wrapper.java.command=d:/programsfiles/jdk1.6/bin/java
	d, type 'nexus start'
		The nexus-weapp service is not installed. //so we nedd to install to windows services.
	e, type 'nexus install'
		after you execute this order, and you will see the nexus service in the windows services list.
	f, when you installed, type 'localhost:8081/nexus' in the browser,
		admin/admin123
	

v8
提交自己的jar文件（例如user-core）到nexus，执行命令mvn:deploy
(1)3rd party	hosted
(2)release		hosted
(3)snaphsot		hosted
(4)central		proxy

例如，提交usre-core
当pom文件中version为snapshot时，执行deploy，提交到(3)
当version为release时，执行deploy，提交到(2)
如里在mvnrepostory.com（中央仓库）中没有jar包，在官网有gav，
需要以下载到本地（或者pom文件），然后上传至(1).

nexus面向局域网

(4)是存放从central repository下载下来的jar

在user-parent的pom中使用nexus
<repositorys>
	<repository>
		<id>nexus</id>
		<name>Nexus Repository</name>
		<url>此处配置maven-public的地址</url>
		<!-- 可以下载release的jar包，默认true-->
		<releases>
			<enabled>true</enabled>
		</releases>
		<!-- snapshot默认是关闭的，需要手工开启 -->
		<snaphsot>
			<enabled>true</enabled>
		</snaphsot>
	</repository>
</repositorys>

但是如果想让其它项目也使用这个配置呢？
修改maven的settings配置

标签含义
profile指的是配置，不止是nexus的配置

//配置列表
<profiles>
	<!-- 每一个profile就是一个配置 -->
	<profile>
		<id>nexusProfile</id>

		<repositories>
			<repository>
				<id>nexus</id>
				<name>Nexus Repository</name>
				<url>这时一般是私服的组地址</url>
				<layout>default</layout>
				<snapshotPolicy>always</snapshotPolicy>
				<!-- 可以下载release的jar包，默认true-->
				<releases>
					<enabled>true</enabled>
				</releases>
				<!-- snapshot默认是关闭的，需要手工开启 -->
				<snaphsot>
					<enabled>true</enabled>
				</snaphsot>
			</repository>
		</repositories>
	<profile>
<profiles>

//激活配置列表
<activeProfiles>
	<activeProfile>nexusProfile</activeProfile>
</activeProfiles>

这样，每个项目的parent中不用再配置了！！！
可以引入一个依赖，在maven console中就用看到下载路径。

当把nexus关闭（nexus stop）时，在引入包时，先找nexus，找不到，会从中央仓库中找。
中央仓库在model-builder包中。

不要从central repository找，可以在settings文件中配置mirror.
<mirror>
	<id>nexusMirror</id>
	<!-- 
	当访问nexus,central时，会访问镜像地址，找不到就找不到喽！
	一般推荐使用*，表示所有的reposiory都访问镜像地址
	-->
	<mirrorOf>nexus,central</mirrorOf>
	<url>此处是镜像地址</url>
</mirror>

Note:
当访问central时，首先会找maven的repository的配置，
而且会使用它的配置，例如central中的snapshot的配置为true。
但是我们想使用自己的配置呢？
使用profile配置！！！
<profile>
	<id>centralProfile</id>
	<!-- 此处的name要和一致 -->
	<name>central</name>
	<!-- 当配置mirror时，此地址用不到，随便配置个 -->
	<url>http://*</url>
	<layout>default</layout>
	<snapshots>
		<!-- 自定义 -->
		<enabled>true</enabled>
	<snaphsots>

当找jar时，找到mirror, 使用nexus的属性配置，使用central的属性配置。






















