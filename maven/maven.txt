

From
百度云盘/technology/Maven知识讲解

install maven

config environment variable
	M2_HOME
	MAVEN_HOME
	
maven standard layout
	src/main/java //source code
	src/test/java //test class
	src/main/resources //conf file

lifecycle
	mvn clean //delete target directory
	mvn compile //compile class to target/classes
	mvn test //generate three test report(surefire..)
	mvn package //generate project_name.jar
	mvn install //install jar to the local repository. after installed, you can refer in other project.

declare dependency
	<dependency>
		<groupId>com.vic</groupId>
		<artifactId>user-core</artifactId>
		<version>1.0.0-Release</version>
	</dependency>

//project object model
pom.xml

//central repository, you can find in lib\maven-model-builder.jar\org\...\pom-4.0.0.mxl.
mvnrepository.com


//local repository, the default local repository, 
you can change the default repository by update conf/settings.xml(localRepository).
such as: d:\repo
C:\Users\Victor\.m2


mvn archetype
	refer to note/maven/02-xxx.txt
	

maven内置隐式变量
	${project.groupId}
	${project.version}
	...
	

依赖范围(scope)

	默认是compile
	
	test
	在测试范围有效，对于src/main/java是无效的，只对src/test/java有效。
	在编译、打包时不会将依赖加到lib中。
	
	compile
	在编译、打包时将依赖加到lib中。
	
	provided
	在编译、测试加进去，打包不加进去，如servlet-api.jar,
	已经存在tomcat等web容器中，打包会有冲突的。
	
	runtime
	编译、测试无效，打包时用到，如：mysql-connector.jar
	
依赖传递
	scope为test是不会传递的。
	
	要在自己的项目中引入junit(test范围)

第一种情况：
直接依赖  
	A -> v1.0
	B -> v2.0

间接依赖
	C -> A, B
	在C中的pom.xml中先写谁就用谁，此处用A。
	
当依赖层级相同时，谁在前面先依赖谁。

第二种情况：
A -> M -> jv1.0

B -> jv1.3

C -> A, B

则C使用的是B中的jv1.3，即按照最短路径依赖。


当想使用具体的version时而且存在传递依赖时，
可以使用exclusions标签排除不需要的依赖，即排除此项目依赖的依赖项。

在dependency标签中声明optional标签，表示此依赖不具有传递。
即只有在本项目中使用，不会传递到引用该项目的项目中。如果要使用，需要单独声明dependency

//exclusuions和optional的使用
https://www.jianshu.com/p/6eee9191f2ab


create a simple project(skip archetype selection)
packing pom




snaphsot 不稳定版本
alpha 内测
beta 公测
release(RC) 发布版本
GA (General Available) 可靠/产品版本
				
cms0.0.1-SNAPSHOT-->cms0.0.1-Release-->cms1.0.1-SNAPSHOT(架构有大的调整)
				--->cms0.1.1-SNAPSHOT										-->cms1.0.1-Release(合并)
				--->cms0.1.1-Release


v7
查找依赖顺序local repository -> nexus -> central repository

publish way
	tomcat
	built-in jetty
	
nexus-lasted-bundle
	/nexus-2.3.1-01/bin
	/sonatype-work/nexus //私服库，所有的东西都存在这儿
	
install nexus
	a, add "bin" environment variable 
	b, type nexus in the command line
		start, stop, restart, install, uninstall
	c, bin/jws/conf/wrapper.conf/
		wrapper.java.command=d:/programsfiles/jdk1.6/bin/java
	d, type 'nexus start'
		The nexus-weapp service is not installed. //so we nedd to install to windows services.
	e, type 'nexus install'
		after you execute this order, and you will see the nexus service in the windows services list.
	f, when you installed, type 'localhost:8081/nexus' in the browser,
		admin/admin123
	

v8
//deploy
mvn deploy:deploy-file -Dmaven.test.skip=true -Dfile=D:\pica_common-1.1.9.1.jar -DgroupId=com.picahealth.common -DartifactId=pica_common -Dversion=1.1.9.1 -Dpackaging=jar -DrepositoryId=nexus -Durl=http://47.92.24.162:8081/repository/pica-3rdParty/

提交自己的jar文件（例如user-core）到nexus，执行命令mvn:deploy
(1)3rd party	hosted
(2)release		hosted
(3)snaphsot		hosted
(4)central		proxy

例如，提交usre-core
当pom文件中version为snapshot时，执行deploy，提交到(3)
当version为release时，执行deploy，提交到(2)
如里在mvnrepostory.com（中央仓库）中没有jar包，在官网有gav，
需要以下载到本地（或者pom文件），然后上传至(1).

nexus面向局域网

(4)是存放从central repository下载下来的jar

在user-parent的pom中使用nexus
<repositorys>
	<repository>
		<id>nexus</id>
		<name>Nexus Repository</name>
		<url>此处配置maven-public的地址</url>
		<!-- 可以下载release的jar包，默认true-->
		<releases>
			<enabled>true</enabled>
		</releases>
		<!-- snapshot默认是关闭的，需要手工开启 -->
		<snaphsot>
			<enabled>true</enabled>
		</snaphsot>
	</repository>
</repositorys>

但是如果想让其它项目也使用这个配置呢？
修改maven的settings配置

标签含义
profile指的是配置，不止是nexus的配置，包含其它公共配置。

//配置列表
<profiles>
	<!-- 每一个profile就是一个配置 -->
	<profile>
		<id>nexusProfile</id>

		<repositories>
			<repository>
				<id>nexus</id>
				<name>Nexus Repository</name>
				<url>这时一般是私服的组地址</url>
				<layout>default</layout>
				<snapshotPolicy>always</snapshotPolicy>
				<!-- 可以下载release的jar包，默认true-->
				<releases>
					<enabled>true</enabled>
				</releases>
				<!-- snapshot默认是关闭的，需要手工开启 -->
				<snaphsot>
					<enabled>true</enabled>
				</snaphsot>
			</repository>
		</repositories>
	<profile>
<profiles>

//激活配置列表
<activeProfiles>
	<activeProfile>nexusProfile</activeProfile>
</activeProfiles>

这样，每个项目的parent中不用再配置了！！！
可以测试引入一个依赖，在maven console中就用看到下载路径，
把nexus关闭（nexus stop）后，在引入包时，先找nexus，找不到，会从中央仓库中找。
中央仓库在model-builder包中配置。

当不想从central repository找，可以在settings文件中配置mirror.
<mirror>
	<id>nexusMirror</id>
	<!-- 
	当访问nexus(私服),central时，会访问镜像地址，找不到就找不到喽！
	一般推荐使用*，表示所有的reposiory都访问镜像地址
	-->
	<mirrorOf>nexus,central</mirrorOf>
	<url>此处是镜像地址</url>
</mirror>

Note:
当访问central(mirrorOf中的配置)时，首先会找maven本身的repository的配置（model-builder包中），
并且使用此配置，比如central中的snapshot的配置为true。
但是我们想使用自己的配置呢？
使用profile配置！！！
<profile>
	<id>centralProfile</id>
	<!-- 此处的name要和maven中的一致 -->
	<name>central</name>
	<!-- 当配置mirror时，此地址用不到，随便配置个 -->
	<url>http://*</url>
	<layout>default</layout>
	<snapshots>
		<!-- 覆盖maven的配置 -->
		<enabled>true</enabled>
	<snaphsots>

当寻找dependency时，找到mirror, 使用nexus的属性配置，使用central的属性配置。



v9
indexer
nexus

发布到nexus中
	使用clean deploy
	
配置user-parent的pom.xml(在modules下面)
	<distributionManagement>
		<repository>
			<id>user-releases</id>
			<name>user releases repo</name>
			<url>hosted类型release url</url>
		</repository>
		<snaphshotRepository>
			<id>user-snapshots</id>
			<name>user snapshots repo</name>
			<url>hosted类型snapshot url</url>
		</snapshotRepository>
	</distributionManagement>
	
再次执行
	clean deploy

查看nexus用户
	Security/Users
	在此菜单下可以看到，anonymous用户只有默认权限，不能deployment.
	所以，需要配置级别较高用户
	
修改settings文件配置用户
	<!-- config users for user project -->
	<server>
      <id>user-releases</id>
      <username>admin</username>
      <password>admin123</password>
    </server>
	<server>
	  <id>user-snapshots</id>
      <username>admin</username>
      <password>admin123</password>
    </server>

	
遇到的错误
1) [WARNING] Could not transfer metadata com.vic:user-parent:0.0.1-SNAPSHOT/maven-metadata.xml from/to user snapshot (http://localhost:8083/repository/maven-releases/): Failed to transfer file: http://localhost:8083/repository/maven-releases/com/vic/user-parent/0.0.1-SNAPSHOT/maven-metadata.xml. Return code is: 400 , ReasonPhrase:Repository version policy: RELEASE does not allow metadata in path: com/vic/user-parent/0.0.1-SNAPSHOT/maven-metadata.xml.

原因：是因为我配置的distributionManagement/snaphshotRepository是release的地址，导致无法转换。

2) [ERROR] Failed to execute goal org.apache.maven.plugins:maven-deploy-plugin:2.7:deploy (default-deploy) on project user-parent: Failed to deploy artifacts: Could not transfer artifact com.vic:user-parent:pom:0.0.1-20171202.075024-1 from/to user snapshot (http://localhost:8083/repository/maven-snapshots/): Failed to transfer file: http://localhost:8083/repository/maven-snapshots/com/vic/user-parent/0.0.1-SNAPSHOT/user-parent-0.0.1-20171202.075024-1.pom. Return code is: 401, ReasonPhrase: Unauthorized. -> [Help 1]

原因：未配置<server>标签，用户名admin, 密码admin123



创建nexus仓库供rumor项目使用
	Repositorys/Create Repository/Maven2(hosted)
		1) name //rumor-releases
		2) Version policy //release
		3) Deployment policy //Allow redeploy
		
创建Privileges
	Security/Privileges/Create privileges/Select Privileges Type(Repository View)
	1) name //project-rumor-releases-all
	2) Description
	3) Format //maven2
	4) Repository //rumor-releases
	5) Actions //*
	重复上述，创建snapshots的权限

创建Role
	Security/Roles/Create role/Nexus role
	1) Role ID //role-rumor-all
	2) Role name //role-rumor-all
	3) Role Description
	4) Privileges 
		a, project-rumor-releases-all
		b, project-rumor-snapshots-all

创建User
	Security/User/Create local user
	1) ID //rumor
	2) First Name, Last Name, Email, Password
	3) Status //active
	4) Roles
		a, role-rumor-all
	
完成上述步骤后，在settings.xml中配置server为rumor用户。
pom.xml中配置distributionManagement，执行deploy，你会看到jar上传到rumor-snapshots仓库上。

遇到的问题
	创建Privileges时，第一次选择了Application类型，使用了通配符，
	发现在privileges列表中出现了project-rumor-all, x.rumor-releases.*, y.rumor-snapshots.*.
	删除了project-rumor-all后，x.rumor-releases.*和y.rumor-snaphsots.*仍然存在。
	没找到删除的地方！！！




v10
maven三套生命周期
clean
	pre-clean clean之前完成的工作
	clean 移除所有上一次构建生成的文件
	post-clean clean之后立刻完成的工作

compile
	validate
	generate-sources
	process-sources
	generate-resources
	process-resources 复制并处理资源文件，至目标目录，准备打包。
	compile 编译项目的源代码
	process-classes
	generate-test-sources
	process-test-sources
	generate-test-resources
	process-test-resources 复制并处理资源文件，至目标测试目录。
	test-compile 编译测试源代码。
	process-test-classes
	test 使用合适的单元测试框架运行测试。这些测试代码不会被找包或部署
	prepare-package
	package 接受编译好的代码，打包成可发布的格式，如jar
	pre-integration-test
	integration-test
	post-integration-test
	verify
	verify
	install 将包安装至本地仓库，以让其它项目依赖。
	deploy 将最终的包复制到远程的仓库，以让其它开发人员与项目共享。
	
site
	pre-site 执行一些需要在生成站点文档之前完成的工作
	site 生成项目的站点文档
	post-site 执行一些需要在生成站点文档之后完成的工作，并且为部署做准备。
	
	
插件位置
	D:\repository\org\apache\maven\plugins

pom中使用插件（user-core）
	<build>
		<plugins>
			<!-- 把源代码打包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<!-- 在compile后执行jar,test-jar -->
						<goals>
							<goal>jar</goal>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>


v11
仓库和插件生命周期
本地仓库、私有仓库、中央仓库
nexus
三套生命周期
	clean, compile, site
	
在user-parent的pom中使用pluginManagement
	pom.xml
	<build>
		<pluginManagement>
		<plugins>
			<!-- 把源代码打包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
				<version>2.2.1</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<!-- 在compile后执行jar,test-jar -->
						<goals>
							<goal>jar</goal>
							<goal>test-jar</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compile-plugin</artifactId>
				<version>3.0</version>
				<configuration>
					<source>1.6</source>
					<target>1.6</target>
				</configuration>
			</plugin>
		</plugins>
		</pluginManagement>
	</build>

在子模块在引用parent的配置
	pom.xml
	<build>
		<plugins>
			<!-- 把源代码打包 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compile-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	
使用mojo插件创建执行sql
	user-parent的pom.xml
	<plugin>
		<groupId>org.codehaus.mojo</groupId>
		<artifactId>sql-maven-plugin</artifactId>
		<version>1.5</version>
		<dependencies>
			<dependency>
				<!-- mysql的驱动依赖 -->
			</dependency>
		</dependencies>
		<configuration>
			<driver>${jdbc.driver}</driver>
			<url>${jdbc.url}</url>
			<username>${jdbc.username}</username>
			<password>${jdbc.pasword}</password>
		</configuration>
		<!-- 执行时绑定的阶段 -->
		<executions>
			<!-- compile后创建数据库 -->
			<execution>
				<id>create-db</id>
				<phase>compile</phase>
				<goals><goal>execute</goal></goals>
				<configuration>
					<sqlCommand>create database if not exists my_test</sqlCommand>
				</configuration>
			</execution>
			<!-- test-compile后执行文件 -->
			<execution>
				<id>init-table</id>
				<phase>test-compile</phase>
				<goals><goal>execute</goal></goals>
				<configuration>
					<srcFile>src/main/resources/init.sql</srcFile>
				</configuration>
			</execution>
		</executions>
		
	init.sql
		use my_test;
		create table if not exists t_user(
			id int(10) auto_increment primary key,
			username varchar(20),
			pasword varchar(20)
		);
		

v12
surefire掌管测试

默认执行类名
	Test***
	***Test
	***TestCase

自定义执行测试类
	<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.20.1</version>
        <configuration>
          <!-- 设置包含的测试类 -->
		  <includes>
			<include>**/Hello*</include>
		  </includes>
		  <!-- 设置不进行测试的类 -->
		  <!--<excludes>
			<exclude>Test*</exclude>
		  </excludes>-->
		  <!-- 跳过测试，但编译错误不会忽略，如果要忽略在compiler配置skip-->
		  <skip>true</skip>
        </configuration>
      </plugin>

忽略测试类的编译错误
	在user-parent中pom.xml的comipler配置skip为true
	  
使用help
	help:describe -DgrouId=xxx, -DartifactId=yyy

手动忽略测试
	package -DskipTests=true //跳过测试

执行指定的测试类
	clean package -Dtest=Hello.java

生成测试覆盖率报告
	cobertura:cobertura
	
可以配置此插件
	在user-parent中的pom.xml配置，子模块引用时只需配置ga坐标
	<!-- 测试覆盖率报告 -->
	<plugin>
		<groupId>org.codehaus.mojo</groupId>
		<artifactId>cobertura-maven-plugin</artifactId>
		<configuration>
			<formats>
				<format>html</format>
				<format>xml</format>
			</formats>
		</configuration>
		<executions>
			<execution>
				<id>cobertura-report</id>
				<goals>
					<goal>cobertura</goal>
				</goals>
				<phase>test</phase>
			</execution>
		</executions>
	</plugin>
	

v14
<servlet>
<servlet-mapping>

el
isELIgnored=false

copy-maven-plugin
	project.build.outputDirectory指的是target/classes目录

//定义属性
catalina.home
	d:/tomcat

在user-parent的pom中配置
<plugin>
	<groupId>com.github.goldin
	<artifactId>copy-maven-plugin
	<version>0.2.5
	<executions>
		<execution>
			<id>copy-war
			<phase>package
			<goals>
				<goal>copy</goal>
			</goals>
			<configuration>
				<resources>
					<resource>
						<!-- catalina.home指tomcat安装路径 -->
						<targetPath>${catalina.home}/webapps</targetPath>
						<!-- project.build.directory指的是target目录 -->
						<directory>${project.build.directory}</directory>
						<!-- 要copy的文件 -->
						<includes>
							<include>user-web.war</include>
						</includes>
					</resource>
				</resources>
			</configuration>
		</execution>
	</executions>

</plugin>


在user-web中引用
	<build>
		<plugin>
			此处配置ga
		
配置jetty插件（在user-parent的pom中）
	<plugin>
		<groupId>org.mortbay.jetty
		<artifactId>jetty-maven-plugin
		<configuration>
			<!-- 10秒扫一次 -->
			<scanIntervalSeconds>10
			<webApp>
				<contextPath>/hello</contextPath>
			</webApp>
			<connectors>
				<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
					<port>8787</port>
					<maxIdleTime>60000<maxIdleTime>
				</connector>
			</connectors>
		</configuration>
	Note: 未绑定version会自动下载合适版本
		
		
在user-web中引用
	<plugin>
		此处配置ga
	</plugin>

手动启动jetty
	build...
	clean compile jetty:run

访问地址
	localhost:8787/hello/hello.do

java 企业设计模式



