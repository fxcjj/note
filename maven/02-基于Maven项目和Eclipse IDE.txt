
一、Use maven to create a java project
在本教程中，我们将向你展示如何使用 Maven 来创建一个 Java 项目，导入其到Eclipse IDE，并打包 Java 项目到一个 JAR 文件。
所需要的工具
	Maven 3.x.x
	Eclipse
	JDK 8

Note: 确保安装好maven路径，避免mvn命令未找到错误。

1、从Maven模板创建一个项目
在终端（* UNIX或Mac）或命令提示符（Windows）中，浏览到要创建 Java 项目的文件夹。键入以下命令：
mvn archetype:generate -DgroupId={project-packaging} -DartifactId={project-name}-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

这告诉Maven来从maven-archetype-quickstart模板创建Java项目。
如果忽视archetypeArtifactId选项，一个巨大的Maven模板列表将列出。

例如：当前目录为：/usr/local/work，执行命令
mvn archetype:generate -DgroupId={project-packaging} -DartifactId={project-name}-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false


[king@localhost Desktop]$ mvn archetype:generate -DgroupId=com.rumor -DartifactId=maven1 -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building Maven Stub Project (No POM) 1
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> maven-archetype-plugin:3.0.1:generate (default-cli) > generate-sources @ standalone-pom >>>
[INFO] 
[INFO] <<< maven-archetype-plugin:3.0.1:generate (default-cli) < generate-sources @ standalone-pom <<<
[INFO] 
[INFO] 
[INFO] --- maven-archetype-plugin:3.0.1:generate (default-cli) @ standalone-pom ---
[INFO] Generating project in Batch mode
[WARNING] No archetype found in remote catalog. Defaulting to internal catalog
[INFO] ----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-quickstart:1.0
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: basedir, Value: /home/king/Desktop
[INFO] Parameter: package, Value: com.rumor
[INFO] Parameter: groupId, Value: com.rumor
[INFO] Parameter: artifactId, Value: maven1
[INFO] Parameter: packageName, Value: com.rumor
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] project created from Old (1.x) Archetype in dir: /home/king/Desktop/maven1
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.202 s
[INFO] Finished at: 2017-11-06T20:20:11+08:00
[INFO] Final Memory: 15M/37M
[INFO] ------------------------------------------------------------------------

此时在work目录下会生成一个maven项目，项目结构如下
maven1
	|-src
	|---main
	|-----java
	|-------com
	|---------rumor
	|-----------App.java
	|---test|-----java
	|-------com
	|---------rumor
	|-----------AppTest.java
	|-pom.xml

源码放在/src/main/java/, 所有的单元测试代码放在/src/test/java/.

2、Eclipse IDE
为了使它成为一个 Eclipse 项目，在终端进入到 “maven1” 项目，键入以下命令：
[root@localhost maven1]# mvn eclipse:eclipse
...
[INFO] Not writing settings - defaults suffice
[INFO] Wrote Eclipse project for "maven1" to /home/king/work/maven1.
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 50.609 s
[INFO] Finished at: 2017-11-06T20:36:49+08:00
[INFO] Final Memory: 13M/32M


执行以上命令后，它自动下载更新相关资源和配置信息（需要等待一段时间），并产生 Eclipse IDE所要求的所有项目文件，如.classpath, .project文件。
要导入项目到Eclipse IDE中，选择 “File -> Import… -> General->Existing Projects into Workspace”

3、更新pom
默认的 pom.xml 太简单了，很多时候，你需要添加编译器插件来告诉 Maven 使用哪个 JDK 版本是用来编译项目。（默认JDK1.4，这的确太旧了点）

<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-compiler-plugin</artifactId>
	<version>2.3.2</version>
	<configuration>
		<source>1.6</source>
		<target>1.6</target>
	</configuration>
</plugin>

从更新JUnit 3.8.1到最新的 4.11。
<dependency>
	<groupId>junit</groupId>
	<artifactId>junit</artifactId>
	<version>4.11</version>
	<scope>test</scope>
</dependency>

4、junit测试
	refer to /maven1/src/test/java/AppTest.java
	
5、maven打包
打包前要看下pom.xml文件头部。
pom.xml
	<project...
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.yiibai</groupId>
	<artifactId>NumberGenerator</artifactId>	
	<packaging>jar</packaging>	
	<version>1.0-SNAPSHOT</version>
	
在终端输入mvn package
[root@localhost maven1]# mvn package
...
[INFO] Building jar: /home/king/work/maven1/target/maven1-1.0-SNAPSHOT.jar
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 43.699 s
[INFO] Finished at: 2017-11-07T13:52:08+08:00
[INFO] Final Memory: 12M/28M

执行完成之后，在maven1目录下生成了一个target目录，下面包含maven1-1.0-SNAPSHOT.jar。

6、从项目的jar文件运行应用程序示例
[root@localhost maven1]# java -cp target/maven1-1.0-SNAPSHOT.jar com.rumor.App
Hello World!


二、使用Maven创建Web应用程序项目

用到的技术和工具
	Maven 3.x
	Eclipse
	Jdk 8
	Spring 4.1.1.RELEASED
	Tomcat 8
	Logback 1.0.13
	
1. Create Web project from maven template.
可以通过使用maven-archetype-webapp模板来创建一个快速启动Java Web应用程序的项目。

在终端输入如下命令：
[root@localhost work]# mvn archetype:generate -DgroupId=com.rumor  -DartifactId=reactive -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false
...
----------------------------------------------------------------------------
[INFO] Using following parameters for creating project from Old (1.x) Archetype: maven-archetype-webapp:1.0
[INFO] ----------------------------------------------------------------------------
[INFO] Parameter: basedir, Value: /home/king/work
[INFO] Parameter: package, Value: com.rumor
[INFO] Parameter: groupId, Value: com.rumor
[INFO] Parameter: artifactId, Value: reactive
[INFO] Parameter: packageName, Value: com.rumor
[INFO] Parameter: version, Value: 1.0-SNAPSHOT
[INFO] project created from Old (1.x) Archetype in dir: /home/king/work/reactive
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 31.580 s
[INFO] Finished at: 2017-11-07T17:35:14+08:00
[INFO] Final Memory: 14M/44M
[INFO] ------------------------------------------------------------------------


The new project name is reactive, the directory structure accord with the standard directory layout of maven.
Maven will generate some directory, and an deployment descriptor(web.xml), pom.xml and index.jsp.

2. Eclipse IDE support

if you want to import the project into eclipse, you need to generate some configuration file about eclipse.
enter the reactive directory, and enter below command: 

[root@localhost work]# mvn eclipse:eclipse -Dwtpversion=2.0
...
[INFO] --- maven-eclipse-plugin:2.10:eclipse (default-cli) @ reactive ---
[INFO] Adding support for WTP version 2.0.
[INFO] Using Eclipse Workspace: null
[INFO] Adding default classpath container: org.eclipse.jdt.launching.JRE_CONTAINER
[INFO] Not writing settings - defaults suffice
[INFO] Wrote Eclipse project for "reactive" to /home/king/work/reactive.
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 6.982 s
[INFO] Finished at: 2017-11-07T17:47:22+08:00
[INFO] Final Memory: 13M/32M
[INFO] ------------------------------------------------------------------------

Note: 
this optional (-Dwtpversion=2.0) tell maven translate this project into web project(WAR) in the eclipse, not the default java project(JAR).
for convenience, we will tell you how to config the WTP in the pom.xml later.

3. Update pom.xml
In maven, Web项目的设置都通过这个单一的pom.xml文件配置。
	* add dependency - Spring, logback, JUnit
	* add plugin
	
pom.xml
<project xmlns="http://maven.apache.org/POM/4.0.0" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0  http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.yiibai</groupId>
	<artifactId>CounterWebApp</artifactId>
	<packaging>war</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>CounterWebApp Maven Webapp</name>
	<url>http://maven.apache.org</url> <properties>
		<jdk.version>1.7</jdk.version>
		<spring.version>4.1.1.RELEASE</spring.version>
		<jstl.version>1.2</jstl.version>
		<junit.version>4.11</junit.version>
		<logback.version>1.0.13</logback.version>
		<jcl-over-slf4j.version>1.7.5</jcl-over-slf4j.version>
	</properties>

	<dependencies>
		<!-- Unit Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
		</dependency>

		<!-- Spring Core -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>${spring.version}</version>
			<exclusions>
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${jcl-over-slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>${logback.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-web</artifactId>
			<version>${spring.version}</version>
		</dependency>

		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		<!-- jstl -->
		<dependency>
			<groupId>jstl</groupId>
			<artifactId>jstl</artifactId>
			<version>${jstl.version}</version>
		</dependency>
	</dependencies>

	<build>
		<finalName>CounterWebApp</finalName>

		<plugins>
		    <!-- Eclipse project -->
		  <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-eclipse-plugin</artifactId>
			<version>2.9</version>
			<configuration>
			        <!-- Always download and attach dependencies source code -->
				<downloadSources>true</downloadSources>
				<downloadJavadocs>false</downloadJavadocs>
				<!-- Avoid type mvn eclipse:eclipse -Dwtpversion=2.0 -->
				<wtpversion>2.0</wtpversion>
			</configuration>
		  </plugin>

		  <!-- Set JDK Compiler Level -->
		  <plugin>
			<groupId>org.apache.maven.plugins</groupId>
			<artifactId>maven-compiler-plugin</artifactId>
			<version>2.3.2</version>
			<configuration>
				<source>${jdk.version}</source>
				<target>${jdk.version}</target>
			</configuration>
		  </plugin>

		  <!-- For Maven Tomcat Plugin -->
		  <plugin>
			<groupId>org.apache.tomcat.maven</groupId>
			<artifactId>tomcat7-maven-plugin</artifactId>
			<version>2.2</version>
			<configuration>
				<path>/CounterWebApp</path>
			</configuration>
		  </plugin>
		</plugins>
	</build>
</project


Note: for convenience, declaring maven-eclipse-plugin and config wtpversion to avoid type arguments(-Dwtpversion=2.0) in the command.
now, 每次使用 mvn eclipse:eclipse，Maven将这个项目导入转换为 Eclipse Web 项目。

# before
mvn eclipse:eclipse --> Eclipse Java project(JAR)
mvn eclipse:eclipse -Dwtpversion=2.0 --> Eclipse Java web project(WAR)

# after
mvn eclipse:eclipse --> Eclipse Java web project(WAR)

4. Update source code
after config pom.xml, re-execution command mvn eclipse:eclipse,
we will create some directory about Spring MVC and logback, the final 
directory layout as below.

.
|____pom.xml
|____src
| |____main
| | |____java
| | | |____com
| | | | |____reactive
| | | | | |____controller
| | | | | | |____BaseController.java
| | |____resources
| | | |____logback.xml
| | |____webapp
| | | |____WEB-INF
| | | | |____mvc-dispatcher-servlet.xml
| | | | |____pages
| | | | | |____index.jsp
| | | | |____web.xml

Note: if not exists, we need to create manually.

4.1 Create controller.
/src/main/java/com/reactive/controller/BaseController.java

@Controller
public class BaseController {

	private static int counter = 0;
	private static final String VIEW_INDEX = "index";
	private final static org.slf4j.Logger logger = LoggerFactory.getLogger(BaseController.class);

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public String welcome(ModelMap model) {

		model.addAttribute("message", "Welcome");
		model.addAttribute("counter", ++counter);
		logger.debug("[welcome] counter : {}", counter);

		// Spring uses InternalResourceViewResolver and return back index.jsp
		return VIEW_INDEX;

	}

	@RequestMapping(value = "/{name}", method = RequestMethod.GET)
	public String welcomeName(@PathVariable String name, ModelMap model) {

		model.addAttribute("message", "Welcome " + name);
		model.addAttribute("counter", ++counter);
		logger.debug("[welcomeName] counter : {}", counter);
		return VIEW_INDEX;

	}

}

4.2 创建Spring配置文件
/src/main/webapp/WEB-INF/mvc-dispatcher-servlet.xml

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

	<context:component-scan base-package="com.rumor.controller" />
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/pages/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>

</beans>

4.3
更新让现有的 web.xml 支持 Servlet 2.5(默认的Servlet2.3 太旧了)， 并且还通过 Spring 监听器 ContextLoaderListener 集成了Spring框架。
/src/main/webapp/WEB-INF/web.xml
<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	      http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>Counter Web Application</display-name>

	<servlet>
		<servlet-name>mvc-dispatcher</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<load-on-startup>1</load-on-startup>
	</servlet>

	<servlet-mapping>
		<servlet-name>mvc-dispatcher</servlet-name>
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>/WEB-INF/mvc-dispatcher-servlet.xml</param-value>
	</context-param>

	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
</web-app>


4.4 移动文件 index.jsp 到 WEB-INF/pages 目录下， 为了保护直接访问。并更新内容：
/src/main/webapp/WEB-INF/pages/index.jsp

4.5 在资源文件夹(resources)中创建 logback.xml 文件
/src/main/resources/logback.xml
<?xml version="1.0" encoding="UTF-8"?> 


5. Eclipse + Tomcat
create war, you can do:
[root@localhost reactive]# mvn package

依赖输入位置
project -> Properties -> Deployment Assembly

6. tomcat8-maven-plugin
useless


三、转换基于Maven的Web应用程序支持Eclipse IDE
Convert Web Application based on maven to support Eclipse IDC.

WTP
Web Tools Platform

在上一节教程中，使用Maven创建了一个Web应用程序。这里有一个指南，告诉你如何转换Web应用程序到Eclipse IDE支持的形式。
注意，通过WTP工具Eclipse IDE支持Web应用程序，所以需要让基于Maven的项目支持它。

1. mvn eclipse:eclipse -Dwtpversion=2.0

要转换一个基于Maven的Java项目支持IDE，使用此命令：
mvn eclipse:eclipse

对于Web应用程序，需要额外的参数，使其支持 Eclipse WTP，应该使用这个命令：
mvn eclipse:eclipse -Dwtpversion=2.0

//通过archetype创建项目
[root@localhost stupid]# mvn archetype:generate -DgroupId=com.rumor -DartifactId=stupid
	1) 提示选择archetype，回车选择默认（要先springmvc, spring, mybatis/hibernate）
	2) 提示groupId, artifactId
	3) 确认信息

//转换为web项目
[root@localhost stupid]# mvn eclipse:eclipse -Dwtpversion=2.0
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] Building stupid 1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] >>> maven-eclipse-plugin:2.10:eclipse (default-cli) > generate-resources @ stupid >>>
[INFO] 
[INFO] <<< maven-eclipse-plugin:2.10:eclipse (default-cli) < generate-resources @ stupid <<<
[INFO] 
[INFO] 
[INFO] --- maven-eclipse-plugin:2.10:eclipse (default-cli) @ stupid ---
[INFO] Adding support for WTP version 2.0.
[INFO] Using Eclipse Workspace: null
[INFO] Adding default classpath container: org.eclipse.jdt.launching.JRE_CONTAINER
[INFO] Not writing settings - defaults suffice
[INFO] Wrote Eclipse project for "stupid" to /home/king/work/stupid.
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 3.055 s
[INFO] Finished at: 2017-11-10T20:35:08+08:00
[INFO] Final Memory: 10M/24M
[INFO] ------------------------------------------------------------------------
[root@localhost stupid]# 

2. 此时会生成三个文件
.classpath文件
.project文件
.settings文件夹
	* org.eclipse.wst.common.component
	* org.eclipse.wst.common.project.facet.core.xml

File: org.eclipse.wst.common.component
<?xml version="1.0" encoding="UTF-8"?>
<project-modules id="moduleCoreId" project-version="2.0">
  <wb-module deploy-name="stupid">
    <property name="context-root" value="stupid"/>

File: org.eclipse.wst.common.project.facet.core.xml
<?xml version="1.0" encoding="UTF-8"?>
<faceted-project>
  <fixed facet="jst.java"/>
  <fixed facet="jst.web"/>
  <installed facet="jst.web" version="2.4"/>
  <installed facet="jst.java" version="1.8"/>
</faceted-project>


3. 导入其到Eclipse
File -> Import… -> General -> Existing Projects into Workspace




四、使用Maven模板创建项目
在Maven3.3版本中，有超过1000+个模板，Maven团队已过滤掉一些无用的模板。
generally, we just need two template as below:
	* maven-archetype-webapp --Java Web Project(WAR)
	* maven-archetype-quickstart --Java Project(JAR)

1. Maven 1000+模板
如果输入命令mvn archetype:generate, 1000+个模板会显示在屏幕上，你无法选择什么。
为了解决这个问题，输出模板列表，像这样保存为文件文件：

[root@localhost work]# mvn archetype:generate > templates.txt //waiting few seconds,then exits
Press CTRL + C

[root@localhost work]# grep mybatis template.txt //825是spring, springmvc, mybatis

2. mvn archetype:generate
将会列表模板，指导你去用xxx模板创建项目。
	* 选择序号
	* groupId等信息
	
Note: 要导入项目到Eclipse中，键入命令mvn eclipse:eclipse，并导入它作为一个正常的项目

3. Learn more
If you konw to use which archetypeArtifactId, skip the interactiveMode.
such as:
3.1 maven-archetype-quickstart(Java Project)
[root@localhost work]# mvn archetype:generate -DgroupId=com.rumor.core -DartifactId=<ProjectName> -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false

3.2 maven-archetype-webapp(Java Web Project)
$ mvn archetype:generate -DgroupId=com.rumor.web -DartifactId=<ProjectName> -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false





