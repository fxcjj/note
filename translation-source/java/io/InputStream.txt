
java.io.InputStream


此抽象类是所有表示字节输入流的类的超类。
需要定义InputStream子类的应用程序必须总是提供返回input的下一个字节的方法。
public abstract class InputStream implements Closeable {

//MAX_SKIP_BUFFER_SIZE is used to determine the maximum buffer skip
//to use when skipping.
private static final int MAX_SKIP_BUFFER_SIZE = 2048;


从输入流读取数据的下一个字节。返回0到255范围内的int字节值。
如果因为已经到流末尾而没有可用的字节，则返回值-1。
在输入数据可用、检测到流末尾或者抛出异常前，此方法一直阻塞。

子类必须提供一个此方法的实现 。

返回：
	下一个数据字节，如果到达流的末尾，则返回-1
抛出：
	IOException if an I/O error occurs.
public abstract int read() throws IOException;



从输入流中读取一些字节数目到buffer数组b中。
以整数返回实际读取到的字节数。
在输入数据可用、检测到流末尾或者抛出异常前，此方法一直阻塞。

如果数组b的长度是0，那么无字节可读且返回0；否则，试图至少读取一个byte.
如果到达流的末尾，则返回-1；否则则读取至少一个byte存储到数组b。

第一个byte存储到元素b[0]中，下一个byte存储到元素b[1]，依此类推。
读取到的最多的字节数目是，等于数组b的长度。设k为实际读取到的字节数。
那么这些字节将存储在元素b[0]到b[k-1]，剩余元素b[k]到b[b.length-1]不受影响。

InputStream类的read(b)方法和read(b, 0, b.length)效果一样。

参数：
	b - 存储读入数据的缓冲区
返回：
	一次读入到buffer中的总字节数，当到达流末尾无数据时返回-1
抛出：
	IOException - 如果因为任何原因而非到达文件末尾不能读取字节，如果流已关闭，或者一些其他I/O错误发生，则抛出该异常。
	NullPointerException - if b is null
public int read(byte b[]) throws IOException {
return read(b, 0, b.length);
}


将输入流中最多len个字节读入byte数组。
尝试读取len个字节，但读取的字节可能小于该值。
以整数形式返回实际读取的字节数。

在输入数据可用、检测到流末尾或者抛出异常前，此方法一直阻塞。

如果len为0，则无字节可读且返回0；否则，将尝试读取至少一个byte。
如果到达流到达文件末尾则无字节可用，返回-1；否则，读取至少一个byte存储到数组b。

第一个读取的byte存储到元素b[off]中，下一个byte存储到元素b[off+1]，依此类推。
读取到的字节数，最多等于len。设k为实际读取字节数；这些字节被存储在元素b[off]到b[off+k-1]，
元素b[off+k]到[off+len-1]不受影响。

在任何情况下，b[0]到b[off]的元素以及b[off+len]到b[b.length-1]的元素都不会受到影响。

InputStream类的read(b, off, len)方法只是简单重复调用read()方法。
如果第一次call导致IOException，则exception从调用read(b,off,len)方法返回。
如果后续的read()调用导致IOException，此exception将被捕获并当作到达文件末尾处理；
到达该点时读取的字节存储到b中，并返回在发生异常之前读取的字节数。
在已读取输入数据len的请求数量、检测到文件末尾、或抛出异常前，此方法的默认实现是将一直阻塞。
鼓励子类提供一个此方法更高效的实现。
参数：
	b - 读入数据的缓冲区
	off - 数组b中将写入数据的初始偏移量
	len - 要读取的最大字节数
返回：
	读取到buffer中的总字节数，或者因为到达流末尾而无可用数据时，返回-1。
抛出：
	IOException - 第一次read因为任何原因而非到达文件末尾、输入流已关闭、一些其他I/O错误发生，则抛出该异常。
	NullPointerException - 如果b为null
	IndeOutOfBoundsException - 如果off为负数、len为负数、len大于b.length-off时，则抛出该异常。
public int read(byte b[], int off, int len) throws IOException {




跳过和丢弃此输入流中数据的n个字节。
出于各种原因，skip方法结束时跳过的字节数可能小于该数，也可能为0.
导致这种情况的原因很多；跳过n个字节之前已到达文件末尾只是其中一种可能。
返回跳过的实际字节数。如果n为负数，则不跳过任何字节。

此类的skip方法创建一个byte array，然后重复将字节读入其中，
直到读够n个字节或已到达流末尾为止。
建议子类提供此方法更为有效的实现。
例如，可依赖搜索能力的实现。

参数：
	n - 要跳过的字节数。
返回：
	跳过的实际字节数。
抛出：
	IOException 如果此流不支持搜索，或者发生其他I/O错误。
public long skip(long n) throws IOException {




通过无阻塞方式调用此输入流下一个方法，并返回此输入流读取（或已跳过）的估计字节数。
下一个调用可能是同一个线程，或者是另一个线程。
一次读取或跳过此“估计数”个字节不会受阻塞，但读取或跳过的字节数可能小于该数。

注意，有些InputStream的实现返回流中的字节总数，但也有很多实现不会这样做。
使用此方法的返回值去分配欲保存流中所有数据的buffer大小，是不正确的。

如果已经调用close()方法关闭了此输入流，那么此方法的子类实现可以选择招聘IOException。

类InputStream的available方法总是返回0。

此方法应该由子类重写。

返回：
	可以不受阻塞地从此输入流读取（或跳过）的估计字节数，或者当它到达输入流末尾时，返回0.
抛出：
	IOException - if an I/O error occurs.
public int available() throws IOException {
return 0;
}



关闭此输入流并释放与此流关联的所有系统资源。
The <code>close</code> method of <code>InputStream</code> does nothing.
exception:
	IOException - if an I/O error occurs.
public void close() throws IOException {}



标记此输入流的当前（读取）位置。
后续调用reset方法根据最后mark重新定位此流位置，以便后面的read操作重新读取到相同的字节。

readlimit参数告诉此输入流允许读取的多个字节，在mark位置失效前。

mark的常规约定是：
如果markSupported方法返回true，则输入流总会在调用mark之后记住所有读取的字节，
并且无论何时调用reset，都会准备再次提供那些相同的字节。
但是，如果在调用reset之前可以从流中读取多于readlimit的字节，则根本不需要该流记住任何数据。

标记已关闭的流对其无效。

InputStream的mark方法不执行任何操作。

参数：
	readlimit - 在标记位置失效前，可以读取的字节的最大限制。
参见：
	java.io.InputStream#reset()
public synchronized void mark(int readlimit) {}



将此流重新定位到最后一次对此输入流调用mark方法时的位置。
reset的常规协定是：
* 如果markSupported方法返回true，那么：
	* 如果创建流以后未调用方法mark，或最后调用mark以后从该读取的字节数大于最后调用mark时的参数，
	则可能抛出IOException。
	* 如果未抛出这样的IOException，则将该流重新设置为这种状态：
	最近一次调用mark以后（如果mark未被调用过）读取的所有字节将重新提供给read方法的后续调用者，
	后跟任何从调用reset时起将作为下一输入数据的字节。
* 如果markSupported方法返回true，那么：
	* 调用reset方法可能抛出IOException。
	* 如果未抛出这样的IOException，则将该流重置为固定状态，该状态取决于输入流的特定类型及其创建方式。
	提供给后续read方法的调用者的字节取决于输入流的特定类型。
除了抛出IOException，类InputStream的reset方法不执行任何操作。
抛出：
	IOException - 如果此流未被标记，或者如果标记失效。
参见：
	java.io.InputStream#mark(int)
	java.io.IOException
public synchronized void reset() throws IOException {
throw new IOException("mark/reset not supported");
}



测试此输入流是否支持mark和reset方法。
是否支持mark和reset是特定输入流实例的不变属性。
InputStream的markSupported方法返回false。
返回：
	true - 如果此流实例支持mark和reset方法；否则返回false
参见：
	java.io.InputStream#mark(int)
	java.io.InputStream#reset()
public boolean markSupported() {
return false;
}


Conclusion
输入流的老大，一般提供将数据从disk读到memory。
常用方法
read 读取字节
available 返回估计的可用字节数（或可跳过字节数）
close 关闭流
markSupported 是否支持标记
mark 标记位置
reset 恢复位置
skip 跳转/忽略字节

