

准备数据
create table t_goods (
	goods_id smallint unsigned primary key auto_increment,
	goods_name varchar(30),
	goods_price float(8,3),
	goods_cate varchar(30)
);

insert t_goods values(null, '苹果', 2, '水果'),(null, '香蕉', 1, '水果'),(default, '西瓜', 5, '水果');
insert t_goods values(null, 'A', 4, 'WORD'),(null, 'B', 9, 'WORD'),(default, 'C', 8, 'WORD');
insert t_goods values(null, '电脑', 100, '电器'),(null, '手机', 200, '电器'),(default, '风扇', 400, '电器');


//使客户端以gbk编码显示
//不影响数据库中的编码
SET NAMES gbk;

子查询
是指出现在其他SQL语句内的SELECT子句。

SELECT * FROM user WHERE id = (SELECT id FROM user = xxx);
//外层查询
SELECT * FROM user
//子查询
SELECT id FROM user = xxx


比较运算符
	=、>、<、>=、<=、<>、!=、<=>
语法结构
	operand comparison_operator ANY (subquery)


//四舍五入
SELECT ROUND(AVG(goods_price), 2) FROM t_goods;

//查询大于平均价格的商品
//使用子查询
SELECT goods_id, goods_name, goods_price FROM t_goods 
WHERE goods_price >= (SELECT ROUND(AVG(goods_price), 2) FROM t_goods);

//查询价格大于“超级本”的价格的商品
SELECT goods_id, goods_name, goods_price FROM t_goods 
WHERE goods_price > (SELECT goods_price FROM t_goods WHERE goods_cate = '水果');
ERROR 1242 (21000): Subquery returns more than 1 row

用ANY,SOME或ALL修饰的比较运算符
	operand comparison_operator ANY (subquery)
	operand comparison_operator SOME (subquery)
	operand comparison_operator ALL (subquery)

============ANY,SOME,ALL关键字==================================
运算符\关键字	ANY		SOME	ALL
>, >=			最小值	最小值	最大值
<, <=			最大值	最大值	最小值
=				任意值	任意值	
<>, !=							任意值
==============================================	
	
	
//子查询取最小值
SELECT goods_id, goods_name, goods_price FROM t_goods 
WHERE goods_price > ANY (SELECT goods_price FROM t_goods WHERE goods_cate = '水果');

//子查询取最大值
SELECT goods_id, goods_name, goods_price FROM t_goods 
WHERE goods_price > ALL (SELECT goods_price FROM t_goods WHERE goods_cate = '水果');

//子查询值取属于‘水果’的价格，是且的关系，毛也查不出
SELECT goods_id, goods_name, goods_price FROM t_goods 
WHERE goods_price = ALL (SELECT goods_price FROM t_goods WHERE goods_cate = '水果');

//子查询值取‘水果’的任意一个价格
SELECT goods_id, goods_name, goods_price FROM t_goods 
WHERE goods_price = ANY (SELECT goods_price FROM t_goods WHERE goods_cate = '水果');

//子查询值取‘水果’的任意一个价格
SELECT goods_id, goods_name, goods_price FROM t_goods 
WHERE goods_price = SOME (SELECT goods_price FROM t_goods WHERE goods_cate = '水果');


使用[NOT] IN的子查询
语法结构
operand comparison_operator [NOT] IN (subquery)
=ANY 运算符 与 IN 等价
!=ALL 或 <>ALL 与 NOT IN 等价



使用[NOT] EXISTS的子查询
如果子查询返回任何行，EXISTS将返回TRUE，否则为FALSE

//用户
CREATE TABLE user(
id SMALLINT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
username VARCHAR(30) NOT NULL,
dept_name VARCHAR(30) -- 存储名称，之后要拆出一张“部门表”
);

//部门
CREATE TABLE dept (
	dept_id smallint unsigned primary key auto_increment,
	name varchar(30)
);


INSERT...SELECT
将查询结果写入数据表
INSERT [INTO] tbl_name (col_name, ...)
SELECT ...

（1）
//将“用户”表的部门名称插入到“部门”表
insert dept(name) select dept_name from user group by dept_name;

//参照外表，更新本表
多表更新
UPDATE table_references
SET col_name1 = {expr1|DEFAULT}
[,col_name1 = {expr1|DEFAULT}] ...
[WHERE where_condifiton]

语法结构
table_reference
{[INNER | CROSS] JOIN | {LEFT|RIGHT} [OUTER] JOIN}
table_reference
ON condition_expr

（2）
//将“部门”表的ID更新到“用户”表
UPDATE user u INNER JOIN dept d ON u.dept_name = d.name
SET u.dept_name = d.dept_id;

（3）
//将“用户”表中的dept_name修改为dept_id
ALTER TABLE user
CHANGE dept_name dept_id SMALLINT UNSIGNED NOT NULL;

CREATE...SELECT
创建表的同时将查询结果写入到数据表
CREATE TABLE [IF EXISTS] tbl_name
[(create_definition, ...)]
select_statement


使用ON连接条件
使用WHERE对结果进行过滤


自身连接
type_id	type_name	parent_id

//查找子类及父类名称
select s.type_id, s.type_name, p.type_name 
from t_type s left join t_type p
on s.parent_id = p.type_id;


//查找父类的子类数目
select p.type_id, p.type_name, count(s.type_name)
from t_type p left join t_type s
on p.type_id = s.parent_id
group by p.type_id
order by p.type_id;


//多表删除
DELETE tbl_name[.*][, tbl_name[.*]] ...
FROM table_references
[WHERE where_condifiton]

//删除重复“名称”，保留最小ID，这里用INNER JOIN也可以
DELETE t1 FROM t_goods AS t1 LEFT JOIN 
-- 默认是升序,TM只能是升序，因为group by的时候，取第一个
(SELECT goods_id, goods_name FROM t_goods GROUP BY goods_name HAVING count(goods_name) > 1) t2
ON t1.goods_name = t2.goods_name
-- 这里就是大于最小值，即保留ID最小的那个
WHERE t1.goods_id > t2.goods_id;



//姓名重复
select * from user where username in (
select username from user u group by u.username having count(*) > 1
);

//
select count(username) as '重复次数', username as FIRST from user group by username having count(username) > 1 order by username desc;

//删除多余数据，留下rowid最大的
delete from user
where user_id in (select user_id from user group by username having count(*) > 1)
and rowid not in (select max(user_id) from user group by username having count(*) > 1);

