
计算属性
computed: {
	//计算属性的getter
	reverseMessage: function() {
		//this指向vm实例 
		return this.message.split('').reverse().join('')
	}
}


计算属性缓存 vs 方法
<p>Reversed message: "{{ reversedMessage() }}"</p>

// 在组件中
methods: {
  reversedMessage: function () {
    return this.message.split('').reverse().join('')
  }
}


计算属性 vs 侦听属性
<div id="demo">{{ fullName }}</div>
var vm = new Vue({
  el: '#demo',
  data: {
    firstName: 'Foo',
    lastName: 'Bar',
    fullName: 'Foo Bar'
  },
  watch: {
    firstName: function (val) {
      this.fullName = val + ' ' + this.lastName
    },
    lastName: function (val) {
      this.fullName = this.firstName + ' ' + val
    }
  }
})
上面代码是命令式且重复的。将它与计算属性的版本进行比较：

var vm = new Vue({
  el: '#demo',
  data: {
    firstName: 'Foo',
    lastName: 'Bar'
  },
  computed: {
    fullName: function () {
      return this.firstName + ' ' + this.lastName
    }
  }
})
好得多了，不是吗？


计算属性的 setter
	上面默认是getter
	还可定义set

侦听器
watch: {
	// 如果 `question` 发生改变，这个函数就会运行
	question: function (newQuestion, oldQuestion) {
	  this.answer = 'Waiting for you to stop typing...'
	  this.debouncedGetAnswer()
	}
},
或者
vm.$watch


