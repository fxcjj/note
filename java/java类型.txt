
Java是强类型的，意味着每个变量都具有一种类型。

数据类型分为二类
1) primitive type //直接包含值
	boolean
	numeric type
		integer type(byte,short,int,long,char)
		floating-point type(float,double)
2) reference type //引用对象
	class type
	interface type
	array type
	null type


基本类型
1) 基本类型是单个值，而不是复杂的对象。
2) 非面向对象
3) 有对应的包装器(wrapper)
4) 有明确的取值范围和数学行为


整型
1) byte,short,int,long,char,分别用8、16、32、64、16bits表示。
2) 有些地方不会把char列为integer，但本质上char是int的一个子集。
3) byte,short,int,long都是有符号的，用2的补码(two's complement)表示。
4) char用16位表示，它是无符号的，表示的是UTF-16编码集。


byte
1) byte由1个字节8位表示，是最小整数类型。
2) 主要用于节省内存空间。
3) 当操作来自网络、文件或者其他IO的数据流时，byte类型特别有用。
4) 取值范围为[-128, 127]，byte的默认值为(byte)0，赋值在范围之外则编译不通过。
5) 字面值：就是表面上的值。
	public void test(byte b)
	当以test(0)调用此方法时，会找不到此方法。它会找test(int x)方法。
6) 对byte类型进行数学运算时，会自动提升为int类型，如果表达式中有double或者float等类型，也是自动提升。
	下面代码是错误的
	byte x = 127;
	byte y = 'a';
	byte z = x + y; //Type mismatch: cannot convert from int to byte


short
1) 用16位表示，取值范围为[-2^15, 2^15-1]。
2) short可能是最不常用的类型了。
3) short类型参与运算的时候，一样被提升为int或者更高的类型。
4) 顺序为byte,short,int,long,float,double


int
1) 用32位表示，取值范围为[-2^31, 2^31-1]。
2) byte和short在运算时会被提升为int类型或更高。
3) java8以后，可以使用int类型表示无符号32位整数[0, 2^31-1]。


long
1) 用64位表示，取值范围为[-2^63, 2^63-1]。
2) 当计算非常大的数时，如果int不足以容纳大小，可以使用long类型。
3) 如果long也不够，可以使用BigInteger类。


char
1) 用16位表示，取值范围为[0, 2^16-1]/[0, 65535]，从'\u0000'到'\uffff'。
2) 无符号，默认值为'\u0000'。
3) Java使用Unicode字符集表示字符，Unicode是完全国际化的字符集，可以表示全部人类语言中的字符。
	Unicode需要16位宽，所以Java中的char类型也使用16 bit表示。 赋值可能是这样的：
	char ch1 = 88;
	char ch2 = 'A';
	ASCII字符集占用了Unicode的前127个值。之所以把char归入整型，是因为Java为char提供算术运算支持，
	例如可以ch2++;之后ch2就变成B。当char进行加减乘除运算的时候，也被转换成int类型，必须显式转化回来。

	
浮点类型
包含单精度的float和双精度的double，分别用32、64bits表示，遵循IEEE 754规范。


float
1) 用32位表示，对应单精度浮点数，
2) 运行速度相比double更快，占内存更小，但是当数值非常大或者非常小的时候会变得不精确。
3) 精度要求不高的时候可以使用float类型，声明赋值示例：
	float f1 = 10;
	f1 = 10L;
	f1 = 10.0f;
	//f1 = 10.0; 默认为double
	可以将byte、short、int、long、char赋给float类型，java自动完成转换。

double
1) 用64位表示，将浮点字面值赋给某个变量时，如果不显示在字面值后面加f或者F，则默认为double类型。
2) java.lang.Math中的函数都采用double类型。
3) 如果double和float都无法达到想要的精度，可以使用BigDecimal类。


boolean
1) 类型只有两个值true和false，默认为false。
2) boolean与是否为0没有任何关系，但是可以根据想要的逻辑进行转换。许多地方都需要用到boolean类型。


字面值
在Java源代码中，字面值用于表示固定的值（fixed value）。数值型的字面值是最常见的，字符串字面值可以算是一种，当然也可以把特殊的null当做字面值。字面值大体上可以分为整型字面值、浮点字面值、字符和字符串字面值、特殊字面值。

整型字面值
1) 从形式上看似是整数的字面值归类为整型字面值。例如：10, 3000L, 'B', 0xFF这些都是字面值。
2) 可以使用进制表示，如十进制（什么都不写）、二进制（0B/0b）、八进制（0）、十六进制（0X/0x），不可超出范围。
3) 建议在字面值后面加上L或l。

浮点字面值
1) 简单理解为小数。分为float,double字面值。
2) 在小数后面加上F或f，如22.2F。不加F/f，则表示double类型，后缀为D/d。
3) 浮点字面值支持科学技术法表示
4) 例子
	double d1 = 10；  
	double d2  = 11.4;  
	double d3 = 1.23E3;  
	double d4 = 10D;  
	double d5 = 0.4D;  
	float f1 = 10;  
	float f2 = 11.1F;  
	float f3 = 1.23e-4F;  
	float f4 = 1.23E0F;

字符及字符串字面值
1) 字符字面值用单引号括起来，如'@', '1'。所有的UTF-16字符集都包含在字符字面值中。
2) 不能直接输入的字符，可以使用转义字符，如'\n'为换行符。
3) 可以使用八进制或者十六进制表示字符，八进制使用反斜杠加3位数字表示，如'\141'表示字母a。
	十六进制使用\u加上4位十六进制的数表示，如'\u0061'表示字符a。
4) 常见转义字符
	\ddd（八进制）、 \uxxxx(十六进制Unicode字符)、\'（单引号）、\"（双引号）、\\ （反斜杠）\r（回车符） \n（换行符） \f（换页符） \t（制表符） \b（回格符）
5) 字符串字面值则使用双引号，字符串字面值中同样可以包含字符字面值中的转义字符序列。
	字符串必须位于同一行或者使用+运算符，因为java没有续行转义序列。


特殊字面值
1) null
2) String.class, Integer.class

在数值型字面值中使用下划线
1) JDK7开始
2) 下划线只能用于数字与数字之间
3) 例如 int x = 123_456_789

基本类型之间的转换
1) boolean与其他7种类型不可转换
2) 数据类型转换有两种：
	自动类型转换: 编译器自动完成类型转换，不需要在程序中编写代码。
	强制类型转换: 强制编译器进行类型转换，必须在程序中编写代码。
3) 排序从小到大 byte < (short=char) < int < long < float < double
4) 如果从小转换到大，可以自动完成，而从大到小，必须强制转换。short和char两种相同类型也必须强制转换。

自动类型转换
自动类型转换，也称隐式类型转换，是指不需要书写代码，由系统自动完成的类型转换。由于实际开发中这样的类型转换很多，所以 Java 语言在设计时，没有为该操作设计语法，而是由 JVM 自动完成。

转换规则：从存储范围小的类型到存储范围大的类型。
具体规则为：byte→short(char)→int→long→float→double

也就是说 byte 类型的变量可以自动转换为 short 类型，示例代码：

byte  b  =  10;
short  sh  =  b;这里在赋值时，JVM 首先将 b 的值转换为 short 类型，然后再赋值给 sh。
在类型转换时可以跳跃。示例代码：

byte  b1  =  100;
int  n  =  b1;
注意问题:在整数之间进行类型转换时，数值不发生改变，而将整数类型，特别是比较大的整数类型转换成小数类型时，由于存储方式不同，有可能存在数据精度的损失。

强制类型转换
强制类型转换，也称显式类型转换，是指必须书写代码才能完成的类型转换。该类类型转换很可能存在精度的损失，所以必须书写相应的代码，并且能够忍受该种损失时才进行该类型的转换。

转换规则:从存储范围大的类型到存储范围小的类型。
具体规则为：double→float→long→int→short(char)→byte
语法格式为：(转换到的类型)需要转换的值

示例代码：
double  d  =  3.10;
int  n  =  (int)d;
这里将 double 类型的变量 d 强制转换成 int 类型，然后赋值给变量 n。需要说明的是小数强制转换为整数，采用的是“去 1 法”，也就是无条件的舍弃小数点的所有数字，则以上转换出的结果是 3。整数强制转换为整数时取数字的低位，例如 int 类型的变量转换为 byte 类型时，则只去 int 类型的低 8 位(也就是最后一个字节)的值。
示例代码：

int  n  =  123;
byte  b  =  (byte)n;
int  m  =  1234;
byte  b1  =  (byte)m;
则 b 的值还是 123，而 b1 的值为-46。b1 的计算方法如下：m 的值转换为二进制是10011010010，取该数字低8位的值作为b1的值，则b1的二进制值是11010010，按照机器数的规定，最高位是符号位，1 代表负数，在计算机中负数存储的是补码，则该负数的原码是 10101110，该值就是十进制的-46。
注意问题:强制类型转换通常都会存储精度的损失，所以使用时需要谨慎。


表达式中的自动类型提升
1) 除了赋值以外，表达式计算过程中也可能发生一些类型转换。在表达式中，类型提升规则如下：
	所有byte/short/char都被提升为int。
	如果有一个操作数为long，整个表达式提升为long。float和double情况也一样。



参考
http://blog.csdn.net/bingduanlbd/article/details/27790287

http://www.cnblogs.com/ggjucheng/archive/2012/11/20/2779081.html

http://blog.csdn.net/inter_peng/article/details/46529191

