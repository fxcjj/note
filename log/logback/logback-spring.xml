<?xml version="1.0" encoding="UTF-8"?>

<!--
根节点configuration，有以下属性
scan 配置文件发生变化，将会被重新加载，默认值为true。
scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。
当scan为true时，此属性才生效，默认的时间间隔为1分钟。
debug 是否打印logback内部运行信息，为true时打印（debug级别）信息。默认值为false
-->
<configuration scan="true" scanPeriod="20 seconds" debug="false">

    <!-- spring boot default configuration, don't use this, you should conf yours. -->
    <!--<include resource="org/springframework/boot/logging/logback/defaults.xml" />-->

    <!--
    contextName 设置日志上下文名称，可以通过%contextName来打印日志上下文名称
    -->
    <contextName>logback-vic</contextName>

    <!--
    property 可以用来定义变量，有以下属性
    a) name 表示变量名称
    b) value 表示变量值，通过${name}来引用
    d) file 用于指定配置文件的路径，他的作用在于，如果你有多个配置信息的话，可以直接写在各自的配置文件中，通过file引入，如：
    <property file="src/main/java/chapters/configuration/variables.properties" />
    variables.properties如下：
        log.dir=d:\\logs //日志目录
        log.name=mylog.log //日志文件名称
    然后配置文件中就可以通过${log.dir}访问到该值。
    d) resource 作用和file一样，不同的是resource可以直接从classpath下引入配置文件
    -->
    <property name="log.dir" value="d:\\logs" />

    <!--
    appender标签为输出目的地
    常用的用控制台输出和文件输出，如以下属性
    a) name appender名称
    b) class 指定输出目的地
    -->
    <!-- 控制台输出 -->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">

        <!-- 过滤掉INFO级别以下的日志，即只打印info,error -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <!-- %d日期，%p日志级别，%file文件名，%line行号，%m输出的信息，%n换行 -->
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <!-- 控制台指定编码 -->
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <!-- 文件输出 -->
    <appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--
        filter 日志输出拦截器
        可以使用系统提供的拦截器，也可以使用自定义的拦截器
        public class MyFilter extends Filter<ILoggingEvent> {

            @Override
            public FilterReply decide(ILoggingEvent event) {
                if (event.getMessage().contains("sample")) {
                    return FilterReply.ACCEPT; //允许输入串
                } else {
                    return FilterReply.DENY; //不允许输出
                }
            }

        }

        使用ThresholdFilter过滤器过滤掉ERROR级别以下的日志不输出到文件中
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>
        -->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>-->

        <!--
        encoder和pattern节点组合用于具体输出的日志格式
        -->
        <encoder>
            <!-- %d日期，%p日志级别，%file文件名，%line行号，%m输出的信息，%n换行 -->
            <pattern>%d %p (%file:%line\)- %m%n</pattern>
            <!-- 控制台指定编码 -->
            <charset>UTF-8</charset>
        </encoder>

        <!--
        file节点用来指明正在记录的日志文件（或者活动文件）的路径及文件名，可以是绝对路径也可以是相对路径
        -->
        <file>${log.dir}/logFile.log</file>

        <!--
        是否以追加方式，日志被追加到文件结尾，默认true。
        如果设置为false，则会清空现存文件。
        -->
        <append>true</append>

        <!--
        prudent 如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。
        -->
        <!--<prudent>true</prudent>-->


        <!--
        rollingPolicy 日志滚动策略
        1) TimeBasedRollingPolicy
            最常用的滚动策略，基于时间的滚动策略，即负责滚动也负责触发滚动。
            有以下子节点：
            <fileNamePattern> 必要节点，归档文件的名称格式，%d指定时间格式，如：%d{yyyy-MM}。
            如果直接使用%d，默认格式为yyyy-MM-dd。
            RollingFileAppender的子节点file可有可无，通过设置file，可以将活动文件和归档文件指定不同的位置，
            当前日志总是记录到file指定的文件（活动文件），活动文件的名称不会改变。
            如果没有设置file，活动文件的名称会根据fileNamePattern的值，每隔一段时间改变一次。"/"或者"\"会被当做目录分隔符。

            <maxHistory> 可选节点，控制保留归档文件的最大数量，超出数量就删除旧文件。
            假设设置每个月滚动，且<maxHistory>是6，则只保存最近6个月的文件，删除之前的旧文件。
            注意，删除旧文件是，那些为了归档而创建的目录也会被删除。
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            &lt;!&ndash; daily rollover &ndash;&gt;
            <fileNamePattern>${log.dir}/logFile.%d{yyyy-MM-dd}.log</fileNamePattern>

            &lt;!&ndash; keep 30 days' worth of history capped at 3GB total size &ndash;&gt;
            <maxHistory>30</maxHistory>
            <totalSizeCap>3GB</totalSizeCap>

        </rollingPolicy>

        2) SizeAndTimeBasedRollingPolicy
            配置子节点的maxFileSize来指定单个日志文件的大小
        fileNamePattern 必要节点，归档文件的名称样式，通常加%d,%i等
        maxHistory 可选节点，保留归档文件的天数，如设置为30，则30天之后，旧的日志就会被删除。
        totalSizeCap 可选节点，指定日志文件的上限大小，如设置为3GB，那么到了这个值 ，就会删除旧的日志。

        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>myLog-%d{yyyy-MM-dd}.%i.txt</fileNamePattern>
            //单个日志文件最多100MB，60天的日志周期，最大不能超过20GB
            <maxFileSize>100MB</maxFileSize>
            <maxHistory>60</maxHistory>
            <totalSizeCap>20GB</totalSizeCap>
        </rollingPolicy>

        3) FixedWindowRollingPolicy
        根据固定窗口算法重命名文件的滚动策略。有以下子节点：
        <minIndex>:窗口索引最小值
　　　　<maxIndex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。
　　　　<fileNamePattern>:必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。
        还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip

        <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
　　　　　　<file>test.log</file>

　　　　　　<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
　　　　　　　　　　<fileNamePattern>tests.%i.log.zip</fileNamePattern>
　　　　　　　　　　<minIndex>1</minIndex>
　　　　　　　　　　<maxIndex>3</maxIndex>
　　　　　　</rollingPolicy>

　　　　　　<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
　　　　　　　　　　<maxFileSize>5MB</maxFileSize>
　　　　　　</triggeringPolicy>
　　　　　　<encoder>
　　　　　　　　　<pattern>%-4relative [%thread] %-5level %logger{35} - %msg%n</pattern>
　　　　　　</encoder>
　　　 </appender>

        NOTE: 上述配置表示按照固定窗口模式生成日志文件，当文件大于5MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。
        -->


        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!-- rollover daily -->
            <fileNamePattern>mylog-%d{yyyy-MM-dd}.%i.txt</fileNamePattern>
            <!-- each file should be at most 100MB, if exceeded will be deleted, keep 60 days worth of history, but at most 20GB -->
            <maxFileSize>5MB</maxFileSize>
            <maxHistory>20</maxHistory>
            <totalSizeCap>5GB</totalSizeCap>
        </rollingPolicy>


    </appender>

    <!--
     root节点，必要节点，用来指定最基础的日志输出级别
     -->
    <root level="debug">
        <appender-ref ref="console" />
        <!--<appender-ref ref="rollingFile" />-->
    </root>

    <!--
    logger节点，可选节点，用来具体指明包的日志输出level和appender。
    指明level和appender使用自己指定的。
    如果不指明level和appender，会向上找父级的level和appender，如com.vic.sb如果没指明，则找com.vic的，直到root。

    属性
    level 指定打印的级别
    additivity 指定是否向上传递，一般都需要的，不然信息也会在root指定的appender中打印出来，默认为true
    -->
    <logger name="com.vic" level="info">
        <appender-ref ref="rollingFile" />
    </logger>

</configuration>