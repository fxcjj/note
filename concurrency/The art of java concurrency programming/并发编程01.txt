第1章 并发编程的挑战

并发编程的目的是为了让程序运行得更快，但是，并不是启动更多的线程就能让程序最
大限度地并发执行。


1.1 上下文切换
时间片一般是几十毫秒（ms）
任务从保存到再加载的过程就是一次上下文切换

1.1.1 多线程一定快吗
参考cn.clairvoyant.concurrency.artofconcurrency.c1.ConcurrencyTest
结果：
累加超过百万级别时，并发速度快，不超过进慢，原因是因为线程有创建和上下文切换的开销。

1.1.2 测试上下文切换次数和时长
a) Lmbench3是一个性能测试工具，可以测量上下文切换的时长
b) vmstat可以测量上下文切换的次数，如vmstat 1表示每隔1秒刷新，cs(Content Switch)表示上下文切换的次数。

1.1.3 如何减少上下文切换
a) 无锁并发编程
b) CAS算法
	参考note\concurrency\java中cas操作.txt
c) 使用最少线程
d) 协程

1.1.4 减少上下文切换实战
参考章节
参考note\concurrency\jstack查看堆栈信息.txt


1.2 死锁
多个并发进程因争夺（互斥）资源而产生相互等待的现象。

参考cn.clairvoyant.concurrency.artofconcurrency.c1.DeadLockTest

一旦出现死锁，业务是可感知的，因为不能继续提供服务了，那么只能dump线程
查看到底哪个线程出现了问题。

介绍避免死锁的几个常见方法
	a) 避免一个线程同时获取多个锁。
	b) 避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。
	c) 尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。
	d) 对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。


1.3 资源限制的挑战
1.3.1 什么是资源限制
资源限制是指在进行并发编程时，程序的执行速度受限于计算机硬件资源或软件资源。
硬件：服务器的带宽、硬盘读写速度和CPU处理速度。
软件：数据库的连接数、socket连接数
	
1.3.2 资源限制引发的问题
在并发编程中，将代码执行速度加快的原则是将代码中串行执行的部分变成并发执行，
但是如果将某段串行的代码并发执行，因为受限于资源，仍然在串行执行，这时候程序不仅不
会加快执行，反而会更慢，因为增加了上下文切换和资源调度的时间。

1.3.3 如何解决资源限制的问题
硬件：考虑使用集群并行执行程序
软件：资源池将资源复用

1.3.4 在资源限制情况下进行并发编程
如何在资源限制的情况下，让程序执行得更快呢？方法就是，根据不同的资源限制调整
程序的并发度，比如下载文件程序依赖于两个资源——带宽和硬盘读写速度。有数据库操作
时，涉及数据库连接数，如果SQL语句执行非常快，而线程的数量比数据库连接数大很多，则
某些线程会被阻塞，等待数据库连接。

1.4 本章小结
a) 遇到的挑战
b) 在并发下如果出现问题，定位起来会比较耗时和棘手
c) 多使用JDK并发包提供的并发容器和工具类来解决并发问题
