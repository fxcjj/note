并发编程的目的是为了让程序运行得更快，但是，并不是启动更多的线程就能让程序最
大限度地并发执行。

面临的挑战
	1. 上下文切换
	2. 死锁
	3. 硬件和软件的资源限制

案例
	参考cn.clairvoyant.concurrency.artofconcurrency.c1.ConcurrencyTest
	
测试上下文切换次数和时长
	1. Lmbench3是一个性能测试工具，可以测量上下文切换的时长
	2. vmstat可以测量上下文切换的次数，如vmstat 1表示每隔1秒刷新，cs(Content Switch)表示上下文切换的次数。

如何减少上下文切换
	1. 无锁并发编程
	2. CAS算法
	3. 使用最少线程
	4. 协程

死锁
	多个并发进程因争夺（互斥）资源而产生相互等待的现象。

死锁案例
	参考cn.clairvoyant.concurrency.artofconcurrency.c1.DeadLockTest

绍避免死锁的几个常见方法
	1. 避免一个线程同时获取多个锁。
	2. 避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源。
	3. 尝试使用定时锁，使用lock.tryLock（timeout）来替代使用内部锁机制。
	4. 对于数据库锁，加锁和解锁必须在一个数据库连接里，否则会出现解锁失败的情况。
	
资源限制的挑战
	1. 什么是资源限制
	2. 资源限制引发的问题
	3. 如何解决资源限制的问题
	4. 在资源限制情况下进行并发编程

本章介绍了在进行并发编程时，大家可能会遇到的几个挑战，并给出了一些解决建议。有
的并发程序写得不严谨，在并发下如果出现问题，定位起来会比较耗时和棘手。
所以，对于 Java开发工程师而言，笔者强烈建议多使用JDK并发包提供的并发容器和工具类来解决并发
问题，因为这些类都已经通过了充分的测试和优化，均可解决了本章提到的几个挑战。





