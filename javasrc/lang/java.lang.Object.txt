
类Object是类层次结构中的根类。
每个类都使用Object作为超类。
所有对象，包括数组都实现这个类的方法。


返回此Object运行时类。
返回的Class对象是由所表示类的static synchronized方法锁定的对象。（第一个“对象”等于第二个“对象”）
实际结果类型是Class<? extends |X|>，
|X|表示清除表达式中的静态类型，在调用了getClass方法。
例如，以下代码片段不需要强制转换：
Number n = 0;
Class<? extends Number> c = n.getClass();
return //返回表示此Object运行时类的Class对象。
public final native Class<?> getClass();



返回此对象的哈希值。
支持此方法是为了提高哈希表（例如java.util.Hashtable提供的哈希表）的性能。
hashCode的常规协定是：
* 在一个java应用程序执行中任何时候在同一对象上调用多次，hashCode()必须一致地返回相同的整数，
	假如/倘若这个对象用于equals比较的信息没有修改。
	从某一应用程序的一次执行到同一应用程序的另一次执行， 这个整数不需要保持一致。
* 如果两个对象根据equals(Object)是相同的，那么在这两个对象上调用hashCode方法一定产生相同的整数结果。
* 如果根据equals是不相等的，调用两个对象上任一对象的hashCode方法不要求必须产生不同的整数结果。
	然后，程序员应该意识到，为不相等的对象生成不同整数结果可以提高哈希表的性能。
几乎/差不多合理实践，由Object定义的hashCode方法为不同对象返回不同的整数。
这一般是通过转换对象的内部地址到一个integer来实现的，此实现技巧在JavaTM编程语言中不是必须的。	
public native int hashCode();



指示其他某个对象是否与此对象“相等”。
equals方法在非空对象上引用实现相等关系：
* 自反性：对于任何非空引用值x，x.equals(x)返回true
* 对称性：对于任何非空引用值x和y，当且仅当y.equals(x)返回true时，x.equals(y)才返回true
* 传递性：对于任何非空引用值x,y和z，如果x.equals(y)返回true，而且y.equals(x)返回true，那么
	x.equals(z)应该返回true
* 一致性：对于任何非空引用值x和y，多次调用x.equals(y)应始终返回true或false，
	前提是对象上equals比较中所用的信息没有被修改。
* 对于任何非空引用值x，x.equals(null)应该返回false

Object类的equals方法实现对象上差别可能性最大的相等关系。
即，对于非空引用值x和y，当且仅当x和y指向同一对象（x==y具有值true），此方法才返回ture。

注意：无论何时此方法被重写时，通过有必要重写hashCode方法，以维护hashCode的常规协定，
该协定声明相等对象必须有相等的哈希码。

参数：
obj - 要与之比较的引用对象
返回：
如果此对象与obj参数相同（内部地址），则返回true；否则返回false。
另请参见：
hashCode()
java.util.Hashtable
public boolean equals(Object obj) {
	return (this == obj);
}



创建和返回此对象的一个副本。“副本”的准确含义可以依赖于对象的类。
这样做的目的是，对于任何对象x，
表达式：
x.clone() != x
为true，表达式：
x.clone().getClass()==x.getClass()
为true，但这些并非必须要满足的要求。
一般情况下：
x.clone().equals(x)
为true，但这并非必须要满足的要求。

按照惯例，返回的对象应该通过调用super.clone获得。如果一个类及其所有的超类(Object除外)遵守此约定，
则x.clone().getClass()==x.getClass().

按照惯例，通过此方法返回的对象应该独立于该对象（正被复制的对象）。
为了实现独立性，在supeer.clone返回对象之前，有必要对该对象的一个或多个字段进行修改。
这通常意味着要复制包含正在被复制对象的内部“深层结构”的所有可变对象，
并使用对副本的引用替换对这些对象的引用。 如果一个类只包含primitive或不变对象的引用，
那么通常不需要修改super.clone返回的对象中的字段。

Object类的clone方法执行特定的复制操作。
首先，如果此对象的类没有实现Cloneable接口，则会抛出CloneNotSupportedException。
注意，所有的数组被视为实现接口Cloneable。
否则，此方法会创建此对象的类的一个新实例，并像通过分配那样，
严格使用此对象相应字段的内容初始化该对象的所有字段；这些字段的内容没有被自我复制。
所以，此方法执行的是该对象的“浅复制”，而不“深复制”操作。

Object类本身不实现接口Cloneable，所以在类为Object的对象上调用clone方法将会导致在运行时抛出异常。
返回：
此实例的一个副本。
抛出：
CloneNotSupportedException - 如果对象的类不支持Cloneable接口，则重写clone 方法的子类也会抛出此异常，以指示无法复制某个实例。
另请参见：
java.lang.Cloneable
protected native Object clone() throws CloneNotSupportedException



返回这个对象的string表现形式。
通常，toString方法返回一个“以文本方式表示”此对象的字符串。
结果应是一个简明但易于读懂的信息表现。
建议所有的子类重写这个方法。
Object类的toString方法返回一个字符串，该字符串由类名（对象是该类的一个实例）、
@标记符和此对象哈希码的十六进制表示组成。
换句话说，此方法返回的string等于以下：
getClass().getName() + '@' + Integer.toHexString(hashCode())
返回：
该对象的字符串表示形式。
public String toString() {
	return getClass().getName() + "@" + Integer.toHexString(hashCode());
}



唤醒在对象监听器等待的单个线程。
如果所有线程在此对象上等待，则会选择其中一个唤醒。
选择是任意的，且发生在实现的决定时。
线程通过调用其中一个wait方法，在对象的监听器上等待。
直到当前线程放弃此对象上的锁定，才能继续执行被唤醒的线程。
被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；
例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。

此方法只应由作为此对象监视器的所有者的线程来调用。
通过以下三种方法之一，一个线程可以成为此对象monitor的所有者：
* 通过执行此对象的synchronized实例方法。
* 通过执行在此对象上进行同步的 synchronized 语句的正文。
* 对于Class类型的对象，可以通过执行该类的同步静态方法。

一次只能有一个线程拥有对象的monitor.

抛出：
IllegalMonitorStateException - 如果当前线程不是此对象监视器的所有者。
另请参见：
notifyAll(), wait()
public final native void notify();



唤醒在对象monitor上等待的所有线程。
唤醒一个在对象monitor上等待的线程使用wait方法。
直到当前线程释放此对象上的锁，被唤醒的线程才能继续进行。
被唤醒的线程将以常规方式与在该对象上主动同步的其他所有线程进行竞争；
例如，唤醒的线程在作为锁定此对象的下一个线程方面没有可靠的特权或劣势。
此方法只应由此对象监视器的所有者的线程来调用。
有关线程能够成为监视器所有者的方法描述，请参阅notity方法。
抛出：
IllegalMonitorStateException - 如果当前线程不是此对象监视器的所有者。
另请参见：
java.lang.Object#notify()
java.lang.Object#wait()
public final native void notifyAll();



在任一其它线程调用notify或notifyAll方法，或者经过一个指定的时间量之前，导致当前线程等待。
当前线程必须拥有此对象监视器。

此方法导致当前线程（称为T）将其自身放在此对象的等待集中，然后释放此对象上的所有同步请求。
出于线程调度目的，在 发生以下四种情况之一 前，线程T被禁用，且处于休眠状态：
* 其他某个线程调用此对象的notify方法，并且线程T碰巧被任选为被唤醒的线程。
* 其他某个线程调用此对象的notifyAll方法。
* 其他某个线程中断线程T。
* 大约已经到达指定的实际时间。但是，如果 timeout为零，则不把real time考虑在内，
	在获得通知前该线程将一直等待。

之后，线程T从此对象的等待集中移除，并变得可用且参加线程调度。
然后以常规方式与其他线程竞争此对象上同步的权利；
一旦它获得此对象的控制权，该对象上所有其同步请求都将被恢复到以前的状态，也就是，
wait方法被调用时的情况。然后，线程T从wait方法的调用中返回。
所以，从wait方法返回时，该对象和线程T的同步状态与调用wait方法时的情况完全相同。
一个线程可以不用notified,interrupted,timeout唤醒，而是一个所谓的spurious wakeup。
虽然这种情况在实践中很少发生，但是应用程序必须通过以下方式防止其发生，即对应该导致该线程被唤醒的条件进行测试，如果不满足该条件，则继续等待。换句话说，等待应总是必须在循环中，like this one:
synchronized(obj) {
	while(<condition does not hold>)
	obj.wait(timeout);
	//Perform action appropriate to condition
}
有关这一主题的更多信息，请看Doug Lea的Concurrent Programming in Java(Second Edition)的3.2.3部分。
或者Joshua Block的Effective Java Programming Language Guide的第50页。

如果当前线程在等待之前或等待时被任何线程中断，则会抛出InterruptedException。
此异常不会抛出，直到此对象的锁定状态被恢复（如上所述）。

注意，wait方法是将当前线程放到此对象的等待集中，所以它只能解除此对象的锁定；
可以同步当前线程的任何其他对象在线程等待时仍处于锁定状态。

此方法应由此对象监视器的所有者的线程来调用。有关线程能够成为监视器所有者的方法的描述，请参阅notify方法。

参数：
timeout - 要等待的最长时间（以毫秒为单位）。
抛出：
IllegalArgumentException - 如果超时值为负。
IllegalMonitorStateException - 如果当前线程不是此对象监视器的所有者。
InterruptedException - 如果在当前线程等待通知之前或者正在等待通知时，任何线程中断了当前线程。在抛出此异常时，当前线程的 中断状态被清除。
另请参见：
java.lang.Object#notify()
java.lang.Object#notifyAll()
public final native void wait(long timeout) throws InterruptedException;


在另一个线程调用此对象的notify方法或nofityAll方法，或其他某个线程打断当前线程，
或经过了指定的实际时间之前，当前线程是处于等待状态的。
此方法类似于wait方法（带有一个参数），但是它允许在放弃之前 对于通知有更好的wait时间量的控制。
此实际时间量以纳秒度量，is given by:
1000000*timeout+nanos
在所有其他方面，此方法和带有一个参数的wait(long)方法相同。
特别指出，wait(0,0)与wait(0)相同。

当前线程必须拥有此对象监视器。
该线程释放此监视器的所有权，直到等待到发生以下两种情况之一：
 * 另一个线程通知在此对象监视器等待的线程s醒来，通过调用notify方法或者nofityAlly方法。
 * timeout毫秒+nanos纳秒之和指定的超时时间已用完。
该线程等待直到它重新获得此对象监视器的所有权，然后恢复执行。
对于在某一个参数的版本，中断和虚假唤醒是有可能的，并且此方法应该总是在循环中使用：
synchronized(obj) {
	while(<conditon does not hold>) 
	obj.wait(timeout, nanos);
	//Perform action appropriate to condition
}
此方法应该仅由此对象监视器的所有者线程调用。
有关线程能够成为监视器所有者的方法描述，请参阅notity方法。
参数：
	timeout 以毫秒为单位的最大等待时间
	nanos 附加时间，以纳秒度量0-999999
抛出：
	IllegalArgumentException 如果超时值为负或nanos值不在0-999999范围。
	IllegalMonitorStateException 如果当前线程不是此对象监视器的所有者。
	InterruptedException 如果当前线程等待通知前或等待通知时被任何线程打断。
	当此异常抛出时，当前线程的打断状态被清除。
public final void wait(long timeout, int nanos) throws InterruptedException {
if(timeout < 0) throw new IllegalArgumentException("timeout value is negative");
if(nanos < 0 || nanos > 999999) throw new IllegalArgumentException("nanosecond timeout value out of range");
if(nanos >= 500000 || (nanos != 0 && timeout == 0)) {timeout++;}
wait(timeout);
}



在另一个线程调用此对象的notify方法或notifyAll方法之前，导致当前线程等待。
换句话说，此方法的行为完全正如仅仅执行wait(0)方法。
当前线程必须拥有此对象监视器。
该线程释放此监视器的所有权，直到等待到另一个线程notifies在此对象监视器上等待醒来的线程们，
通过调用notify方法或者nofityAll方法。该线程然后一直等待直到它可以重新获得此监视器的所有权，
然后恢复执行。
对于在某一个参数的版本，interrupts,spurious wakeups是有可能的，并且此方法应该总是在循环中使用：
synchronized(obj) {
	while(<condition does not hold>)
		obj.wait();
		//Perform action appropriate to condition
}
此方法应该仅由此对象监视器的所有者线程调用。
对于一个线程能够成为一个监视器的所有者的方法描述，请查看notify方法。
抛出：
	IllegalMonitorStateException 如果当前线程不是此对象监视器的所有者。
	InterruptedException 当当前线程在等待通知前或等待通知时被任一线程中断。
	当异常抛出时当前线程的“中断状态”被清除。
另请参见：
	java.lang.Object#notify()
    java.lang.Object#notifyAll()
public final void wait() throws InterruptedException {
wait(0);
}



当垃圾收集确定对象没有更多引用时，由对象的垃圾回收器调用此方法。
子类重写finalize方法，以配置系统资源或执行其他清除。
finalize的常规协定是：
当JavaTM虚拟机已确定尚未终止的任何线程无法通过任何方法访问此对象时，将调用此方法，
除非由于准备终止的其他某个对象或类的终结操作执行了某个（finalize）操作。
finalize方法可以采取任何操作，包括再次使此对象对其他线程可用；
finalize通常目的，不管怎样，是在不可撤消地丢弃对象之前执行清除操作。
例如，表示输入/输出连接的对象的finalize方法可执行显式I/O事务，以便在永久丢弃对象之前中断连接。
Object类的finalize方法无特殊执行动作；它仅仅是正常返回。
Object的子类可以重写此定义。
Java编程语言不保证哪个线程将调用某个给定对象的finalize方法。
它可以保证，不管怎样，在调用finalize时，调用finalize的线程将不会持有任何用户可见的同步锁定。
如果finalize方法抛出未捕获异常，那么该异常将被忽略，并且该对象的终结操作将终止。
在对象的finalize方法调用之后，将不会执行进一步操作，直到JVM再次确定
尚未死亡的任何线程无法通过任何手段访问此对象，包括
准备finalized的其他对象或类执行的可能操作，在执行该操作时，对象可能被丢弃。
对于任何给定对象，Java虚拟机最多只调用一次finalize方法。

finalize方法抛出的任何异常都会导致此对象的finalization被halted,但可以通过其他方法忽略它。
抛出：
	Throwable 由此方法上升的Exception
protected void finalize() throws Throwable { }


