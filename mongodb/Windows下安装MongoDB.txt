
一、安装mognodb
二、使用mongodb
三、高级应用


一、安装mognodb
1. 下载地址：http://www.mongodb.org/downloads
我的网盘：
technology/mongodb/mongodb-3.0.6.zip

document
https://docs.mongodb.com/manual/

2. 解压到自己的目录
	d:\programfiles\mongodb3.0.6
	程序文件都在bin目录中，其它两个目录分别是C++调用是头文件和库文件。
	bin目录下包含如下几个程序：
	1. mongo.exe，命令行客户端工具。
	2. mongod.exe，数据库服务程序。
	3. mongodump.exe，数据库备份程序。
	4. mongoexport.exe，数据导出工具。
	5. mongofiles.exe，GridFS工具。
	6. mongoimport.exe，数据导入工具。
	7. mongorestore.exe，数据库恢复工具。
	8. mongos.exe，貌似是性能检测工具。
	
3. 创建文件夹d:\mongodb\data\db, d:\mongodb\data\log,
	分别用来安装db和日志文件，在log文件夹下创建一个日志文件mongodb.log，
	即d:\mongodb\data\log\mongodb.log
	
4. 运行cmd.exe进入dos命令界面，执行下列命令
	> cd d:\programfiles\mongodb3.0.6\bin
	> mongod -dbpath "d:\mongodb\data\db"
如下：
C:\Users\Victor>mongod -dbpath "d:\mongodb\data\db"
2018-01-11T10:05:00.838+0800 I JOURNAL  [initandlisten] journal dir=d:\mongodb\data\db\journal
2018-01-11T10:05:00.839+0800 I JOURNAL  [initandlisten] recover : no journal files present, no recovery needed
2018-01-11T10:05:00.860+0800 I JOURNAL  [durability] Durability thread started
2018-01-11T10:05:00.861+0800 I JOURNAL  [journal writer] Journal writer thread started
2018-01-11T10:05:00.869+0800 I CONTROL  [initandlisten] MongoDB starting : pid=15076 port=27017 dbpath=d:\mongodb\data\db 64-bit host=DESKTOP-OPJ386A
2018-01-11T10:05:00.870+0800 I CONTROL  [initandlisten] targetMinOS: Windows Server 2003 SP2
2018-01-11T10:05:00.871+0800 I CONTROL  [initandlisten] db version v3.0.6
2018-01-11T10:05:00.871+0800 I CONTROL  [initandlisten] git version: 1ef45a23a4c5e3480ac919b28afcba3c615488f2
2018-01-11T10:05:00.871+0800 I CONTROL  [initandlisten] build info: windows sys.getwindowsversion(major=6, minor=1, build=7601, platform=2, service_pack='Service Pack 1') BOOST_LIB_VERSION=1_49
2018-01-11T10:05:00.871+0800 I CONTROL  [initandlisten] allocator: tcmalloc
2018-01-11T10:05:00.872+0800 I CONTROL  [initandlisten] options: { storage: { dbPath: "d:\mongodb\data\db" } }
2018-01-11T10:05:01.009+0800 I NETWORK  [initandlisten] waiting for connections on port 27017

Note: 看到类似信息，说明启动成功，默认mongodb监听的端口是27017。
可以不用进到mongodb3.0.6\bin目录下执行mongod，方法是将d:\programfiles\mongodb3.0.6\bin加到环境变量path中

5.测试连接
新建一个cmd窗口，执行mongo，出现如下信息说明测试通过，此时进入了test这个数据库。
如下：
C:\Users\Victor>mongo
MongoDB shell version: 3.0.6
connecting to: test
>

输入exit或者ctrl+c退出

6. 当mongod.exe被关闭时，mongo.exe就无法连接到数据库。
因此每次想使用mongodb数据库都要开启mongod.exe程序，所以比较麻烦，此时我们可以将MongoDB安装为windows服务

运行cmd，进入bin目录，执行下列命令：
mongod --dbpath "d:\mongodb\data\db" --logpath "d:\mongodb\data\log\mongodb.log" --install --serviceName "MongoDB"

如下：
2018-01-11T10:37:12.776+0800 I CONTROL  Trying to install Windows service 'MongoDB'
2018-01-11T10:37:12.778+0800 I CONTROL  Service 'MongoDB' (MongoDB) installed with command line '"D:\Program Files\mongodb-3.0.6\bin\mongod.exe" --dbpath d:\mongodb\data\db --logpath d:\mongodb\data\log\mongodb.log --service'
2018-01-11T10:37:12.778+0800 I CONTROL  Service can be started from the command line with 'net start MongoDB'

//启动MongoDB
D:\programfiles\mongodb-3.0.6\bin>net start MongoDB
MongoDB 服务正在启动 .
MongoDB 服务已经启动成功。 

可能出现如下错误：
2018-01-08T18:04:59.905+0800 I CONTROL  Trying to install Windows service 'MongoDB'
2018-01-08T18:04:59.906+0800 I CONTROL  Error connecting to the Service Control Manager: 拒绝访问。 (5)

原因是没有管理员权限，找到命令d:\windows\system32\cmd.exe，右击以管理员身份运行。

7. 关闭服务和删除进程
//关闭服务
D:\programfiles\mongodb-3.0.6\bin>net stop MongoDB

//删除服务，是remove
D:\programfiles\mongodb-3.0.6\bin>mongod --dbpath "d:\mongodb\data\db" --logpath "d:\mongodb\data\log\mongodb.log" --remove --serviceName "MongoDB"


二、使用mongodb
1. 常用命令
	* show dbs //显示数据库列表
	* use dbname //进入dbname数据库，大小写敏感，没有这个数据库也不要紧
	* show collections //显示数据库中的集合，相当于表格

2. 创建&新增
	* db.users.save({"name":"king"}) //创建users集合，并新增一条记录{"name":"king"}
	* db.users.insert({"name":"martin", "age":18}) //在users集合中插入一条数据，如果没有users这个集合，mongodb会自动创建
	
	* save()和insert()存在着些许区别：若新增的数据主键已经存在，insert()会不做任何操作并提示错误，而save()则更改原来的内容为新内容。
	存在数据：{ _id : 1, " name " : " n1 "}		//_id是主键
	insert({ _id : 1, " name " : " n2 " })   	//会提示错误
	save({ _id : 1, " name " : " n2 " })     	//会把n1改为n2，有update的作用

3. 删除
	* db.users.remove() //删除users集合下所有数据
	* db.users.remove({"name": "carl"}) //删除users集合下name=carl的数据
	* db.users.drop()或db.runCommand({"drop","users"}) //删除集合users
	* db.runCommand({"dropDatabase": 1}) //删除当前数据库

4. 查找
	* db.users.find() //查找users集合中所有数据
	* db.users.findOne() //查找users集合中的第一条数据

5. 修改
	
	//现在数据
	> db.users.find()
	{ "_id" : ObjectId("5a575e1994a67a1732a3c2bc"), "id" : 1, "name" : "victor" }

	//执行update
	db.users.update({"name":"victor"}, {"age":18})
	修改name=victor的数据为age=18，第一个参数是查找条件，第二个参数是修改内容。
	Note: 除了主键，其它内容都会被第二参数内容替换。
	
	//修改后的数据
	> db.users.find()
	{ "_id" : ObjectId("5a575e1994a67a1732a3c2bc"), "age" : 10 }
	
	
三、高级应用
1. 条件查找
	* db.collection.find({ "key" : value }) //查找key=value的数据
	* db.collection.find({ "key" : { $gt: value } }) //key > value
	* db.collection.find({ "key" : { $lt: value } }) //key < value
	* db.collection.find({ "key" : { $gte: value } }) //key >= value
	* db.collection.find({ "key" : { $lte: value } }) //key <= value
	* db.collection.find({ "key" : { $gt: value1 , $lt: value2 } }) //value1 < key <value2
	* db.collection.find({ "key" : { $ne: value } }) //key <> value
	* db.collection.find({ "key" : { $mod : [ 10 , 1 ] } }) //取模运算，条件相当于key % 10 == 1 即key除以10余数为1的
	* db.collection.find({ "key" : { $nin: [ 1, 2, 3 ] } }) //不属于，条件相当于key的值不属于[ 1, 2, 3 ]中任何一个
	* db.collection.find({ "key" : { $in: [ 1, 2, 3 ] } }) //属于，条件相当于key等于[ 1, 2, 3 ]中任何一个
	* db.collection.find({ "key" : { $size: 1 } }) //$size 数量、尺寸，条件相当于key的值的数量是1（key必须是数组，一个值的情况不能算是数量为1的数组）
	* db.collection.find({ "key" : { $exists : true|false } }) //$exists字段存在，true返回存在字段key的数据，false返回不存在字度key的数据
	* db.collection.find({ "key": /^val.*val$/i }) //正则，类似like；“i”忽略大小写，“m”支持多行
	* db.collection.find({ $or : [{a : 1}, {b : 2} ] }) //$or或 （注意：MongoDB 1.5.3后版本可用），符合条件a=1的或者符合条件b=2的数据都会查询出来
	* db.collection.find({ "key": value , $or : [{ a : 1 } , { b : 2 }] })  //符合条件key=value ，同时符合其他两个条件中任意一个的数据
	* db.collection.find({ "key.subkey" :value }) //内嵌对象中的值匹配，注意："key.subkey"必须加引号
	* db.collection.find({ "key": { $not : /^val.*val$/i } })   这是一个与其他查询条件组合使用的操作符，不会单独使用。上述查询条件得到的结果集加上$not之后就能获得相反的集合。

2.排序
	* db.collection.find().sort({ "key1" : -1 ,"key2" : 1 }) //这里的1代表升序，-1代表降序

3.其他
	* db.collection.find().limit(5) //控制返回结果数量，如果参数是0，则当作没有约束，limit()将不起作用
	* db.collection.find().skip(5) //控制返回结果跳过多少数量，如果参数是0，则当作没有约束，skip()将不起作用，或者说跳过了0条
	* db.collection.find().skip(5).limit(5) //可用来做分页，跳过5条数据再取5条数据
	* db.collection.find().count(true) //count()返回结果集的条数
	* db.collection.find().skip(5).limit(5).count(true)    在加入skip()和limit()这两个操作时，要获得实际返回的结果数，需要一个参数true，否则返回的是符合查询条件的结果总数


Reference
http://blog.csdn.net/xxx9001/article/details/52196833



