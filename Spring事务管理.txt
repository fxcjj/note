

From
http://m.mamicode.com/info-detail-1248286.html

Spring事务管理
1 事务
事务是一系列的动作，它们综合在一起形成一个完整的工作单元，这些动作必须全部完成，
如果有一个失败的话，那么事务就会回滚到最开始的状态。

1.1 事务特性
原子性（Atomicity）：事务是一个原子操作，由一系列动作组成。事务的原子性确保动作要么全部完成，要么完全不起作用。
一致性（Consistency）：一旦事务完成（不管成功还是失败），系统必须确保它所建模的业务处于一致的状态，而不会是部分完成部分失败。在现实中的数据不应该被破坏。
隔离性（Isolation）：可能有许多事务会同时处理相同的数据，因此每个事务都应该与其他事务隔离开来，防止数据损坏。
持久性（Durability）：一旦事务完成，无论发生什么系统错误，它的结果都不应该受到影响，这样就能从任何系统崩溃中恢复过来。通常情况下，事务的结果被写到持久化存储器中。

2 核心接口
PlatformTransactionManager
AbstractPlatformTransactionManager
	JdbcTransactionManager
	HibernateTransactionManager
	JpaTransactionManager
	JtaTransactionManager

2.1 事务管理器
	2.1.1 JDBC事务
	2.1.2 Hibernate事务
	2.1.3 Java持久化API事务（JPA）
	2.1.4 Java原生API事务

2.2 基本事务属性的定义
事务属性
	传播行为
	隔离级别
	是否readonly
	事务回滚
	事务超时
	2.2.1 传播行为
	2.2.2 隔离级别
	2.2.3 是否readonly
	2.2.4 事务回滚
	2.2.5 事务超时

2.3 事务状态
TransactionStatus
	public interface TransactionStatus{
		boolean isNewTransaction(); // 是否是新的事务
		boolean hasSavepoint(); // 是否有恢复点
		void setRollbackOnly();  // 设置为只回滚
		boolean isRollbackOnly(); // 是否为只回滚
		boolean isCompleted; // 是否已完成
	}

3 编程式事务
3.1 编程式和声明式事务的区别
3.2 如何实现编程式事务？
	Spring提供两种方式的编程式事务管理，分别是：使用TransactionTemplate和直接使用PlatformTransactionManager。
	3.2.1 使用TransactionTemplate
	3.2.2 使用PlatformTransactionManager
4 声明式事务
	4.1 配置方式
		http://www.blogjava.net/robbie/archive/2009/04/05/264003.html
	
	