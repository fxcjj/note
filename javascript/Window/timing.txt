通过使用 JavaScript，我们有能力做到在一个设定的时间间隔之后来执行代码，
而不是在函数被调用后立即执行。我们称之为计时事件。

简单的计时
function timedMsg() {
	var t=setTimeout("alert('5 秒！')",5000)
}
单击本例中的按钮后，会在 5 秒后弹出一个警告框。


另一个简单的计时
function timedText() 
	var t1=setTimeout("document.getElementById('txt').value='2 秒'",2000)
	var t2=setTimeout("document.getElementById('txt').value='4 秒'",4000)
	var t3=setTimeout("document.getElementById('txt').value='6 秒'",6000)
}
<form>
<input type="button" value="显示计时的文本" onClick="timedText()">
<input type="text" id="txt">
</form>
<p>点击上面的按钮。输入框会显示出已经逝去的时间（2、4、6 秒）。</p>
本例中的程序会执行 2 秒、4 秒和 6 秒的计时。


在一个无穷循环中的计时事件
<script type="text/javascript">
var c=0;
var t;
function timedCount() {
	document.getElementById('txt').value=c;
	c=c+1;
	t=setTimeout("timedCount()",1000);
}
</script>
</head>
<body>
<form>
<input type="button" value="开始计时！" onClick="timedCount()">
<input type="text" id="txt">
</form>
<p>请点击上面的按钮。输入框会从 0 开始一直进行计时。</p>



<script type="text/javascript">
var c=0
var t
function timedCount() {
	document.getElementById('txt').value=c
	c=c+1
	t=setTimeout("timedCount()",1000)
}

function stopCount() {
	c=0;
	setTimeout("document.getElementById('txt').value=0",0);
	clearTimeout(t);
}
</script>
</head>
<body>
<form>
<input type="button" value="开始计时！" onClick="timedCount()">
<input type="text" id="txt">
<input type="button" value="停止计时！" onClick="stopCount()">
</form>


使用计时事件制作的钟表
<html>
<head>
<script type="text/javascript">
function startTime(){
	var today=new Date()
	var h=today.getHours()
	var m=today.getMinutes()
	var s=today.getSeconds()
	// add a zero in front of numbers<10
	m=checkTime(m)
	s=checkTime(s)
	document.getElementById('txt').innerHTML=h+":"+m+":"+s
	t=setTimeout('startTime()',500)
}

function checkTime(i) {
	if (i<10){
		i="0" + i
	}
	return i
}
</script>
</head>
<body onload="startTime()">
<div id="txt"></div>
</body>
</html>

JavaScript 计时事件
通过使用 JavaScript，我们有能力作到在一个设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。我们称之为计时事件。
在 JavaScritp 中使用计时事件是很容易的，两个关键方法是:
setTimeout()
未来的某时执行代码
clearTimeout()
取消setTimeout()

setTimeout()
语法
var t=setTimeout("javascript语句",毫秒)
setTimeout() 方法会返回某个值。在上面的语句中，值被储存在名为 t 的变量中。
假如你希望取消这个 setTimeout()，你可以使用这个变量名来指定它。
setTimeout() 的第一个参数是含有 JavaScript 语句的字符串。
这个语句可能诸如 "alert('5 seconds!')"，或者对函数的调用，诸如 alertMsg()"。
第二个参数指示从当前起多少毫秒后执行第一个参数。
提示：1000 毫秒等于一秒。

